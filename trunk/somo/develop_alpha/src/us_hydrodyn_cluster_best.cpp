#include "../include/us3_defines.h"
// ---------------------------------------------------------------------------------------------
// --------------- WARNING: this code is generated by an automatic code generator --------------
// ---------------------------------------------------------------------------------------------
// -------------- WARNING: any modifications made to this code will be overwritten -------------
// ---------------------------------------------------------------------------------------------

#include "../include/us_hydrodyn_cluster_best.h"
//Added by qt3to4:
#include <Q3TextStream>
#include <Q3HBoxLayout>
#include <QCloseEvent>
#include <Q3Frame>
#include <QLabel>
#include <Q3VBoxLayout>

US_Hydrodyn_Cluster_Best::US_Hydrodyn_Cluster_Best(
                                                   void                     *              us_hydrodyn,
                                                   map < QString, QString > *              parameters,
                                                   QWidget *                               p,
                                                   const char *                            name
                                                   ) : QDialog( p, name )
{
   this->us_hydrodyn                          = us_hydrodyn;
   this->parameters                           = parameters;

   USglobal = new US_Config();
   setPalette( PALET_FRAME );
   setCaption( tr( "US-SOMO: BEST cluster interface" ) );

   setupGUI();

   global_Xpos += 30;
   global_Ypos += 30;

   setGeometry( global_Xpos, global_Ypos, 0, 0 );
}

US_Hydrodyn_Cluster_Best::~US_Hydrodyn_Cluster_Best()
{
}

void US_Hydrodyn_Cluster_Best::setupGUI()
{
   int minHeight1  = 30;

   lbl_title =  new QLabel      ( tr( "US-SOMO: BEST cluster interface" ), this );
   lbl_title -> setFrameStyle   ( Q3Frame::WinPanel | Q3Frame::Raised );
   lbl_title -> setAlignment    ( Qt::AlignCenter | Qt::AlignVCenter );
   lbl_title -> setMinimumHeight( minHeight1 );
   lbl_title -> setPalette      ( PALET_FRAME );
   AUTFBACK( lbl_title );
   lbl_title -> setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize + 1, QFont::Bold ) );

   lbl_credits_1 =  new QLabel      ( "Cite: S.R. Aragon, \"A precise boundary element method for macromolecular transport properties\", J. Comp. Chem, 25, 1191-1205 (2004).", this );
   lbl_credits_1 -> setAlignment    ( Qt::AlignCenter | Qt::AlignVCenter );
   lbl_credits_1 -> setMinimumHeight( minHeight1 );
   lbl_credits_1 -> setPalette      ( PALET_LABEL );
   AUTFBACK( lbl_credits_1 );
   lbl_credits_1 -> setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize+1, QFont::Bold ) );

   lbl_credits_2 =  new QLabel      ( "Cite: Michael Connolly, http://biohedron.drupalgardens.com, \"MSRoll\"", this );
   lbl_credits_2 -> setAlignment    ( Qt::AlignCenter | Qt::AlignVCenter );
   lbl_credits_2 -> setMinimumHeight( minHeight1 );
   lbl_credits_2 -> setPalette      ( PALET_LABEL );
   AUTFBACK( lbl_credits_2 );
   lbl_credits_2 -> setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize+1, QFont::Bold ) );

   lbl_bestmsrprober = new QLabel      ( tr( "MSROLL: probe radius (default:blank=1.5)" ), this );
   lbl_bestmsrprober ->setAlignment    ( Qt::AlignLeft | Qt::AlignVCenter );
   lbl_bestmsrprober ->setMinimumHeight( minHeight1 );
   lbl_bestmsrprober ->setPalette      ( PALET_LABEL );
   AUTFBACK( lbl_bestmsrprober );
   lbl_bestmsrprober ->setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   lbl_bestmsrprober ->setMinimumWidth ( QFontMetrics( lbl_bestmsrprober->font() ).maxWidth() * 41 );

   le_bestmsrprober = new QLineEdit     ( this, "bestmsrprober Line Edit" );
   le_bestmsrprober ->setText           ( parameters->count( "bestmsrprober" ) ? ( *parameters )[ "bestmsrprober" ] : "" );
   le_bestmsrprober ->setAlignment      ( Qt::AlignCenter | Qt::AlignVCenter );
   le_bestmsrprober ->setPalette        ( PALET_NORMAL );
   AUTFBACK( le_bestmsrprober );
   le_bestmsrprober ->setFont           ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
   le_bestmsrprober ->setMinimumHeight  ( minHeight1 );
   le_bestmsrprober ->setMinimumWidth   ( 150 );
   connect( le_bestmsrprober, SIGNAL( textChanged( const QString & ) ), SLOT( update_bestmsrprober( const QString & ) ) );

   lbl_bestmsrfinenessangle = new QLabel      ( tr( "MSROLL: starting fineness angle\n(recommended value >= 0.6)" ), this );
   lbl_bestmsrfinenessangle ->setAlignment    ( Qt::AlignLeft | Qt::AlignVCenter );
   lbl_bestmsrfinenessangle ->setMinimumHeight( minHeight1 *  2 );
   lbl_bestmsrfinenessangle ->setPalette      ( PALET_LABEL );
   AUTFBACK( lbl_bestmsrfinenessangle );
   lbl_bestmsrfinenessangle ->setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   lbl_bestmsrfinenessangle ->setMinimumWidth ( QFontMetrics( lbl_bestmsrfinenessangle->font() ).maxWidth() * 41 );

   le_bestmsrfinenessangle = new QLineEdit     ( this, "bestmsrfinenessangle Line Edit" );
   le_bestmsrfinenessangle ->setText           ( parameters->count( "bestmsrfinenessangle" ) ? ( *parameters )[ "bestmsrfinenessangle" ] : "" );
   le_bestmsrfinenessangle ->setAlignment      ( Qt::AlignCenter | Qt::AlignVCenter );
   le_bestmsrfinenessangle ->setPalette        ( PALET_NORMAL );
   AUTFBACK( le_bestmsrfinenessangle );
   le_bestmsrfinenessangle ->setFont           ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
   le_bestmsrfinenessangle ->setMinimumHeight  ( minHeight1 *  2 );
   le_bestmsrfinenessangle ->setMinimumWidth   ( 150 );
   connect( le_bestmsrfinenessangle, SIGNAL( textChanged( const QString & ) ), SLOT( update_bestmsrfinenessangle( const QString & ) ) );

   lbl_bestmsrmaxtriangles = new QLabel      ( tr( "MSROLL: maximum output triangles\n(recommended max value 60000)" ), this );
   lbl_bestmsrmaxtriangles ->setAlignment    ( Qt::AlignLeft | Qt::AlignVCenter );
   lbl_bestmsrmaxtriangles ->setMinimumHeight( minHeight1 *  2 );
   lbl_bestmsrmaxtriangles ->setPalette      ( PALET_LABEL );
   AUTFBACK( lbl_bestmsrmaxtriangles );
   lbl_bestmsrmaxtriangles ->setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   lbl_bestmsrmaxtriangles ->setMinimumWidth ( QFontMetrics( lbl_bestmsrmaxtriangles->font() ).maxWidth() * 41 );

   le_bestmsrmaxtriangles = new QLineEdit     ( this, "bestmsrmaxtriangles Line Edit" );
   le_bestmsrmaxtriangles ->setText           ( parameters->count( "bestmsrmaxtriangles" ) ? ( *parameters )[ "bestmsrmaxtriangles" ] : "" );
   le_bestmsrmaxtriangles ->setAlignment      ( Qt::AlignCenter | Qt::AlignVCenter );
   le_bestmsrmaxtriangles ->setPalette        ( PALET_NORMAL );
   AUTFBACK( le_bestmsrmaxtriangles );
   le_bestmsrmaxtriangles ->setFont           ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
   le_bestmsrmaxtriangles ->setMinimumHeight  ( minHeight1 *  2 );
   le_bestmsrmaxtriangles ->setMinimumWidth   ( 150 );
   connect( le_bestmsrmaxtriangles, SIGNAL( textChanged( const QString & ) ), SLOT( update_bestmsrmaxtriangles( const QString & ) ) );

   lbl_bestrcoalnmin = new QLabel      ( tr( "COALESCE: minimum number of triangles (Typically 2000 for small and 3000 for large protein)" ), this );
   lbl_bestrcoalnmin ->setAlignment    ( Qt::AlignLeft | Qt::AlignVCenter );
   lbl_bestrcoalnmin ->setMinimumHeight( minHeight1 );
   lbl_bestrcoalnmin ->setPalette      ( PALET_LABEL );
   AUTFBACK( lbl_bestrcoalnmin );
   lbl_bestrcoalnmin ->setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   lbl_bestrcoalnmin ->setMinimumWidth ( QFontMetrics( lbl_bestrcoalnmin->font() ).maxWidth() * 41 );

   le_bestrcoalnmin = new QLineEdit     ( this, "bestrcoalnmin Line Edit" );
   le_bestrcoalnmin ->setText           ( parameters->count( "bestrcoalnmin" ) ? ( *parameters )[ "bestrcoalnmin" ] : "" );
   le_bestrcoalnmin ->setAlignment      ( Qt::AlignCenter | Qt::AlignVCenter );
   le_bestrcoalnmin ->setPalette        ( PALET_NORMAL );
   AUTFBACK( le_bestrcoalnmin );
   le_bestrcoalnmin ->setFont           ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
   le_bestrcoalnmin ->setMinimumHeight  ( minHeight1 );
   le_bestrcoalnmin ->setMinimumWidth   ( 150 );
   connect( le_bestrcoalnmin, SIGNAL( textChanged( const QString & ) ), SLOT( update_bestrcoalnmin( const QString & ) ) );

   lbl_bestrcoalnmax = new QLabel      ( tr( "COALESCE: maximum number of triangles (Typically 4000 for small and 9000 for large protein)" ), this );
   lbl_bestrcoalnmax ->setAlignment    ( Qt::AlignLeft | Qt::AlignVCenter );
   lbl_bestrcoalnmax ->setMinimumHeight( minHeight1 );
   lbl_bestrcoalnmax ->setPalette      ( PALET_LABEL );
   AUTFBACK( lbl_bestrcoalnmax );
   lbl_bestrcoalnmax ->setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   lbl_bestrcoalnmax ->setMinimumWidth ( QFontMetrics( lbl_bestrcoalnmax->font() ).maxWidth() * 41 );

   le_bestrcoalnmax = new QLineEdit     ( this, "bestrcoalnmax Line Edit" );
   le_bestrcoalnmax ->setText           ( parameters->count( "bestrcoalnmax" ) ? ( *parameters )[ "bestrcoalnmax" ] : "" );
   le_bestrcoalnmax ->setAlignment      ( Qt::AlignCenter | Qt::AlignVCenter );
   le_bestrcoalnmax ->setPalette        ( PALET_NORMAL );
   AUTFBACK( le_bestrcoalnmax );
   le_bestrcoalnmax ->setFont           ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
   le_bestrcoalnmax ->setMinimumHeight  ( minHeight1 );
   le_bestrcoalnmax ->setMinimumWidth   ( 150 );
   connect( le_bestrcoalnmax, SIGNAL( textChanged( const QString & ) ), SLOT( update_bestrcoalnmax( const QString & ) ) );

   lbl_bestrcoaln = new QLabel      ( tr( "COALESCE: number of files produced (Typically 4)" ), this );
   lbl_bestrcoaln ->setAlignment    ( Qt::AlignLeft | Qt::AlignVCenter );
   lbl_bestrcoaln ->setMinimumHeight( minHeight1 );
   lbl_bestrcoaln ->setPalette      ( PALET_LABEL );
   AUTFBACK( lbl_bestrcoaln );
   lbl_bestrcoaln ->setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   lbl_bestrcoaln ->setMinimumWidth ( QFontMetrics( lbl_bestrcoaln->font() ).maxWidth() * 41 );

   le_bestrcoaln = new QLineEdit     ( this, "bestrcoaln Line Edit" );
   le_bestrcoaln ->setText           ( parameters->count( "bestrcoaln" ) ? ( *parameters )[ "bestrcoaln" ] : "" );
   le_bestrcoaln ->setAlignment      ( Qt::AlignCenter | Qt::AlignVCenter );
   le_bestrcoaln ->setPalette        ( PALET_NORMAL );
   AUTFBACK( le_bestrcoaln );
   le_bestrcoaln ->setFont           ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
   le_bestrcoaln ->setMinimumHeight  ( minHeight1 );
   le_bestrcoaln ->setMinimumWidth   ( 150 );
   connect( le_bestrcoaln, SIGNAL( textChanged( const QString & ) ), SLOT( update_bestrcoaln( const QString & ) ) );

   lbl_bestbestmw = new QLabel      ( tr( "BEST: override computed molecular weight (default:blank=compute from structure)" ), this );
   lbl_bestbestmw ->setAlignment    ( Qt::AlignLeft | Qt::AlignVCenter );
   lbl_bestbestmw ->setMinimumHeight( minHeight1 );
   lbl_bestbestmw ->setPalette      ( PALET_LABEL );
   AUTFBACK( lbl_bestbestmw );
   lbl_bestbestmw ->setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   lbl_bestbestmw ->setMinimumWidth ( QFontMetrics( lbl_bestbestmw->font() ).maxWidth() * 41 );

   le_bestbestmw = new QLineEdit     ( this, "bestbestmw Line Edit" );
   le_bestbestmw ->setText           ( parameters->count( "bestbestmw" ) ? ( *parameters )[ "bestbestmw" ] : "" );
   le_bestbestmw ->setAlignment      ( Qt::AlignCenter | Qt::AlignVCenter );
   le_bestbestmw ->setPalette        ( PALET_NORMAL );
   AUTFBACK( le_bestbestmw );
   le_bestbestmw ->setFont           ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
   le_bestbestmw ->setMinimumHeight  ( minHeight1 );
   le_bestbestmw ->setMinimumWidth   ( 150 );
   connect( le_bestbestmw, SIGNAL( textChanged( const QString & ) ), SLOT( update_bestbestmw( const QString & ) ) );

   lbl_bestbestwatr = new QLabel      ( tr( "BEST: water 'WAT' radius (default:blank = use value from residue table)" ), this );
   lbl_bestbestwatr ->setAlignment    ( Qt::AlignLeft | Qt::AlignVCenter );
   lbl_bestbestwatr ->setMinimumHeight( minHeight1 );
   lbl_bestbestwatr ->setPalette      ( PALET_LABEL );
   AUTFBACK( lbl_bestbestwatr );
   lbl_bestbestwatr ->setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   lbl_bestbestwatr ->setMinimumWidth ( QFontMetrics( lbl_bestbestwatr->font() ).maxWidth() * 41 );

   le_bestbestwatr = new QLineEdit     ( this, "bestbestwatr Line Edit" );
   le_bestbestwatr ->setText           ( parameters->count( "bestbestwatr" ) ? ( *parameters )[ "bestbestwatr" ] : "" );
   le_bestbestwatr ->setAlignment      ( Qt::AlignCenter | Qt::AlignVCenter );
   le_bestbestwatr ->setPalette        ( PALET_NORMAL );
   AUTFBACK( le_bestbestwatr );
   le_bestbestwatr ->setFont           ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
   le_bestbestwatr ->setMinimumHeight  ( minHeight1 );
   le_bestbestwatr ->setMinimumWidth   ( 150 );
   connect( le_bestbestwatr, SIGNAL( textChanged( const QString & ) ), SLOT( update_bestbestwatr( const QString & ) ) );

   lbl_bestexpand = new QLabel      ( tr( "BEST: expand radii by this multiplier (default:blank=1, no expansion)" ), this );
   lbl_bestexpand ->setAlignment    ( Qt::AlignLeft | Qt::AlignVCenter );
   lbl_bestexpand ->setMinimumHeight( minHeight1 );
   lbl_bestexpand ->setPalette      ( PALET_LABEL );
   AUTFBACK( lbl_bestexpand );
   lbl_bestexpand ->setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   lbl_bestexpand ->setMinimumWidth ( QFontMetrics( lbl_bestexpand->font() ).maxWidth() * 41 );

   le_bestexpand = new QLineEdit     ( this, "bestexpand Line Edit" );
   le_bestexpand ->setText           ( parameters->count( "bestexpand" ) ? ( *parameters )[ "bestexpand" ] : "" );
   le_bestexpand ->setAlignment      ( Qt::AlignCenter | Qt::AlignVCenter );
   le_bestexpand ->setPalette        ( PALET_NORMAL );
   AUTFBACK( le_bestexpand );
   le_bestexpand ->setFont           ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
   le_bestexpand ->setMinimumHeight  ( minHeight1 );
   le_bestexpand ->setMinimumWidth   ( 150 );
   connect( le_bestexpand, SIGNAL( textChanged( const QString & ) ), SLOT( update_bestexpand( const QString & ) ) );

   cb_bestbestvc = new QCheckBox    ( tr( "BEST: Compute the Viscosity Factor in the Center of Viscosity {longer calculation} (default:checked)" ), this );
   cb_bestbestvc ->setMinimumHeight ( minHeight1 );
   cb_bestbestvc ->setPalette       ( PALET_NORMAL );
   AUTFBACK( cb_bestbestvc );
   cb_bestbestvc ->setFont          ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   cb_bestbestvc ->setMinimumWidth  ( QFontMetrics( cb_bestbestvc->font() ).maxWidth() * 41 );

   if ( !parameters->count( "bestbestvc" ) )
   {
      ( *parameters )[ "bestbestvc" ] = "true";
   }
   cb_bestbestvc ->setChecked        ( parameters->count( "bestbestvc" ) && ( *parameters )[ "bestbestvc" ] == "true" ? true : false );
   connect( cb_bestbestvc, SIGNAL( clicked() ), SLOT( set_bestbestvc() ) );

   lbl_opt_label =  new mQLabel     ( tr( "Optional controls" ), this );
   lbl_opt_label -> setFrameStyle   ( Q3Frame::WinPanel | Q3Frame::Raised );
   lbl_opt_label -> setAlignment    ( Qt::AlignCenter | Qt::AlignVCenter );
   lbl_opt_label -> setMinimumHeight( minHeight1 );
   lbl_opt_label -> setPalette      ( PALET_FRAME );
   AUTFBACK( lbl_opt_label );
   lbl_opt_label -> setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize, QFont::Bold ) );
   connect( lbl_opt_label, SIGNAL( pressed() ), SLOT( hide_opt_label() ) );


   lbl_bestmsrcoalescer = new QLabel      ( tr( "MSROLL: coalesce radius (default:blank)" ), this );
   lbl_bestmsrcoalescer ->setAlignment    ( Qt::AlignLeft | Qt::AlignVCenter );
   lbl_bestmsrcoalescer ->setMinimumHeight( minHeight1 );
   lbl_bestmsrcoalescer ->setPalette      ( PALET_LABEL );
   AUTFBACK( lbl_bestmsrcoalescer );
   lbl_bestmsrcoalescer ->setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   lbl_bestmsrcoalescer ->setMinimumWidth ( QFontMetrics( lbl_bestmsrcoalescer->font() ).maxWidth() * 41 );

   le_bestmsrcoalescer = new QLineEdit     ( this, "bestmsrcoalescer Line Edit" );
   widgets_opt_label.push_back( lbl_bestmsrcoalescer );
   widgets_opt_label.push_back( le_bestmsrcoalescer );
   le_bestmsrcoalescer ->setText           ( parameters->count( "bestmsrcoalescer" ) ? ( *parameters )[ "bestmsrcoalescer" ] : "" );
   le_bestmsrcoalescer ->setAlignment      ( Qt::AlignCenter | Qt::AlignVCenter );
   le_bestmsrcoalescer ->setPalette        ( PALET_NORMAL );
   AUTFBACK( le_bestmsrcoalescer );
   le_bestmsrcoalescer ->setFont           ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
   le_bestmsrcoalescer ->setMinimumHeight  ( minHeight1 );
   le_bestmsrcoalescer ->setMinimumWidth   ( 150 );
   connect( le_bestmsrcoalescer, SIGNAL( textChanged( const QString & ) ), SLOT( update_bestmsrcoalescer( const QString & ) ) );

   cb_bestbestv = new QCheckBox    ( tr( "BEST: Compute the Viscosity Factor {in the Centroid} (default:unchecked)" ), this );
   cb_bestbestv ->setMinimumHeight ( minHeight1 );
   cb_bestbestv ->setPalette       ( PALET_NORMAL );
   AUTFBACK( cb_bestbestv );
   cb_bestbestv ->setFont          ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   cb_bestbestv ->setMinimumWidth  ( QFontMetrics( cb_bestbestv->font() ).maxWidth() * 41 );

   widgets_opt_label.push_back( cb_bestbestv );
   cb_bestbestv ->setChecked        ( parameters->count( "bestbestv" ) && ( *parameters )[ "bestbestv" ] == "true" ? true : false );
   connect( cb_bestbestv, SIGNAL( clicked() ), SLOT( set_bestbestv() ) );

   cb_bestbestp = new QCheckBox    ( tr( "BEST: perform a pre-averaged hydrodynamic interaction calculation (default:unchecked)" ), this );
   cb_bestbestp ->setMinimumHeight ( minHeight1 );
   cb_bestbestp ->setPalette       ( PALET_NORMAL );
   AUTFBACK( cb_bestbestp );
   cb_bestbestp ->setFont          ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   cb_bestbestp ->setMinimumWidth  ( QFontMetrics( cb_bestbestp->font() ).maxWidth() * 41 );

   widgets_opt_label.push_back( cb_bestbestp );
   cb_bestbestp ->setChecked        ( parameters->count( "bestbestp" ) && ( *parameters )[ "bestbestp" ] == "true" ? true : false );
   connect( cb_bestbestp, SIGNAL( clicked() ), SLOT( set_bestbestp() ) );

   cb_bestbestna = new QCheckBox    ( tr( "BEST: omit the area correction (default:unchecked) {this is actually a regularization, so it is not advised to check this!}" ), this );
   cb_bestbestna ->setMinimumHeight ( minHeight1 );
   cb_bestbestna ->setPalette       ( PALET_NORMAL );
   AUTFBACK( cb_bestbestna );
   cb_bestbestna ->setFont          ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   cb_bestbestna ->setMinimumWidth  ( QFontMetrics( cb_bestbestna->font() ).maxWidth() * 41 );

   widgets_opt_label.push_back( cb_bestbestna );
   cb_bestbestna ->setChecked        ( parameters->count( "bestbestna" ) && ( *parameters )[ "bestbestna" ] == "true" ? true : false );
   connect( cb_bestbestna, SIGNAL( clicked() ), SLOT( set_bestbestna() ) );

   lbl_bestmsrradiifile = new QLabel      ( tr( "MSROLL: manual radii file" ), this );
   lbl_bestmsrradiifile ->setAlignment    ( Qt::AlignLeft | Qt::AlignVCenter );
   lbl_bestmsrradiifile ->setMinimumHeight( minHeight1 );
   lbl_bestmsrradiifile ->setPalette      ( PALET_LABEL );
   AUTFBACK( lbl_bestmsrradiifile );
   lbl_bestmsrradiifile ->setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   lbl_bestmsrradiifile ->setMinimumWidth ( QFontMetrics( lbl_bestmsrradiifile->font() ).maxWidth() * 41 );

   le_bestmsrradiifile = new QLineEdit     ( this, "bestmsrradiifile Line Edit" );
   widgets_opt_label.push_back( lbl_bestmsrradiifile );
   widgets_opt_label.push_back( le_bestmsrradiifile );
   le_bestmsrradiifile ->setText           ( parameters->count( "bestmsrradiifile" ) ? ( *parameters )[ "bestmsrradiifile" ] : "" );
   le_bestmsrradiifile ->setAlignment      ( Qt::AlignCenter | Qt::AlignVCenter );
   le_bestmsrradiifile ->setPalette        ( PALET_NORMAL );
   AUTFBACK( le_bestmsrradiifile );
   le_bestmsrradiifile ->setFont           ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
   le_bestmsrradiifile ->setMinimumHeight  ( minHeight1 );
   le_bestmsrradiifile ->setMinimumWidth   ( 150 );
   connect( le_bestmsrradiifile, SIGNAL( textChanged( const QString & ) ), SLOT( update_bestmsrradiifile( const QString & ) ) );

   lbl_bestmsrpatternfile = new QLabel      ( tr( "MSROLL: manual name pattern file (must also provide radii file above)" ), this );
   lbl_bestmsrpatternfile ->setAlignment    ( Qt::AlignLeft | Qt::AlignVCenter );
   lbl_bestmsrpatternfile ->setMinimumHeight( minHeight1 );
   lbl_bestmsrpatternfile ->setPalette      ( PALET_LABEL );
   AUTFBACK( lbl_bestmsrpatternfile );
   lbl_bestmsrpatternfile ->setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   lbl_bestmsrpatternfile ->setMinimumWidth ( QFontMetrics( lbl_bestmsrpatternfile->font() ).maxWidth() * 41 );

   le_bestmsrpatternfile = new QLineEdit     ( this, "bestmsrpatternfile Line Edit" );
   widgets_opt_label.push_back( lbl_bestmsrpatternfile );
   widgets_opt_label.push_back( le_bestmsrpatternfile );
   le_bestmsrpatternfile ->setText           ( parameters->count( "bestmsrpatternfile" ) ? ( *parameters )[ "bestmsrpatternfile" ] : "" );
   le_bestmsrpatternfile ->setAlignment      ( Qt::AlignCenter | Qt::AlignVCenter );
   le_bestmsrpatternfile ->setPalette        ( PALET_NORMAL );
   AUTFBACK( le_bestmsrpatternfile );
   le_bestmsrpatternfile ->setFont           ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
   le_bestmsrpatternfile ->setMinimumHeight  ( minHeight1 );
   le_bestmsrpatternfile ->setMinimumWidth   ( 150 );
   connect( le_bestmsrpatternfile, SIGNAL( textChanged( const QString & ) ), SLOT( update_bestmsrpatternfile( const QString & ) ) );

   pb_save =  new QPushButton ( tr( "Save" ), this );
   pb_save -> setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize + 1) );
   pb_save -> setMinimumHeight( minHeight1 );
   pb_save -> setPalette      ( PALET_PUSHB );
   connect( pb_save, SIGNAL( clicked() ), SLOT( save() ) );

   pb_load =  new QPushButton ( tr( "Load" ), this );
   pb_load -> setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize + 1) );
   pb_load -> setMinimumHeight( minHeight1 );
   pb_load -> setPalette      ( PALET_PUSHB );
   connect( pb_load, SIGNAL( clicked() ), SLOT( load() ) );

   pb_help =  new QPushButton ( tr( "Help" ), this );
   pb_help -> setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize + 1) );
   pb_help -> setMinimumHeight( minHeight1 );
   pb_help -> setPalette      ( PALET_PUSHB );
   connect( pb_help, SIGNAL( clicked() ), SLOT( help() ) );

   pb_close =  new QPushButton ( tr( "Close" ), this );
   pb_close -> setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize + 1) );
   pb_close -> setMinimumHeight( minHeight1 );
   pb_close -> setPalette      ( PALET_PUSHB );
   connect( pb_close, SIGNAL( clicked() ), SLOT( cancel() ) );

   Q3VBoxLayout *background = new Q3VBoxLayout( this );
   background->addSpacing(4);

   background->addWidget( lbl_title );
   background->addWidget( lbl_credits_1 );
   background->addWidget( lbl_credits_2 );
   background->addSpacing( 4 );
   Q3HBoxLayout * hbl = new Q3HBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( lbl_bestmsrprober );
   hbl->addWidget( le_bestmsrprober );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new Q3HBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( lbl_bestmsrfinenessangle );
   hbl->addWidget( le_bestmsrfinenessangle );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new Q3HBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( lbl_bestmsrmaxtriangles );
   hbl->addWidget( le_bestmsrmaxtriangles );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new Q3HBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( lbl_bestrcoalnmin );
   hbl->addWidget( le_bestrcoalnmin );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new Q3HBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( lbl_bestrcoalnmax );
   hbl->addWidget( le_bestrcoalnmax );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new Q3HBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( lbl_bestrcoaln );
   hbl->addWidget( le_bestrcoaln );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new Q3HBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( lbl_bestbestmw );
   hbl->addWidget( le_bestbestmw );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new Q3HBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( lbl_bestbestwatr );
   hbl->addWidget( le_bestbestwatr );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new Q3HBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( lbl_bestexpand );
   hbl->addWidget( le_bestexpand );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new Q3HBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( cb_bestbestvc );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new Q3HBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( lbl_opt_label );
   hide_widgets( widgets_opt_label, true, false );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new Q3HBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( lbl_bestmsrcoalescer );
   hbl->addWidget( le_bestmsrcoalescer );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new Q3HBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( cb_bestbestv );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new Q3HBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( cb_bestbestp );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new Q3HBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( cb_bestbestna );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new Q3HBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( lbl_bestmsrradiifile );
   hbl->addWidget( le_bestmsrradiifile );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new Q3HBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( lbl_bestmsrpatternfile );
   hbl->addWidget( le_bestmsrpatternfile );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new Q3HBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( pb_save );
   hbl->addWidget( pb_load );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new Q3HBoxLayout( 0 );
   hbl->addSpacing( 4 );


   Q3HBoxLayout *hbl_bottom = new Q3HBoxLayout( 0 );
   hbl_bottom->addSpacing( 4 );
   hbl_bottom->addWidget ( pb_help );
   hbl_bottom->addSpacing( 4 );
   hbl_bottom->addWidget ( pb_close );
   hbl_bottom->addSpacing( 4 );

   background->addLayout ( hbl_bottom );
   background->addSpacing( 4 );
   qApp->processEvents();
   resize( 0, 0 );
}

void US_Hydrodyn_Cluster_Best::cancel()
{
   close();
}

void US_Hydrodyn_Cluster_Best::help()
{
   US_Help *online_help;
   online_help = new US_Help( this );
   online_help->show_help("manual/best.html");
}

void US_Hydrodyn_Cluster_Best::closeEvent( QCloseEvent *e )
{
   if ( parameters->count( "bestmsrprober" ) &&
        (*parameters)[ "bestmsrprober" ].isEmpty() )
   {
      parameters->erase( "bestmsrprober" );
   }
   if ( parameters->count( "bestmsrfinenessangle" ) &&
        (*parameters)[ "bestmsrfinenessangle" ].isEmpty() )
   {
      parameters->erase( "bestmsrfinenessangle" );
   }
   if ( parameters->count( "bestmsrmaxtriangles" ) &&
        (*parameters)[ "bestmsrmaxtriangles" ].isEmpty() )
   {
      parameters->erase( "bestmsrmaxtriangles" );
   }
   if ( parameters->count( "bestrcoalnmin" ) &&
        (*parameters)[ "bestrcoalnmin" ].isEmpty() )
   {
      parameters->erase( "bestrcoalnmin" );
   }
   if ( parameters->count( "bestrcoalnmax" ) &&
        (*parameters)[ "bestrcoalnmax" ].isEmpty() )
   {
      parameters->erase( "bestrcoalnmax" );
   }
   if ( parameters->count( "bestrcoaln" ) &&
        (*parameters)[ "bestrcoaln" ].isEmpty() )
   {
      parameters->erase( "bestrcoaln" );
   }
   if ( parameters->count( "bestbestmw" ) &&
        (*parameters)[ "bestbestmw" ].isEmpty() )
   {
      parameters->erase( "bestbestmw" );
   }
   if ( parameters->count( "bestbestwatr" ) &&
        (*parameters)[ "bestbestwatr" ].isEmpty() )
   {
      parameters->erase( "bestbestwatr" );
   }
   if ( parameters->count( "bestexpand" ) &&
        (*parameters)[ "bestexpand" ].isEmpty() )
   {
      parameters->erase( "bestexpand" );
   }
   if ( parameters->count( "bestmsrcoalescer" ) &&
        (*parameters)[ "bestmsrcoalescer" ].isEmpty() )
   {
      parameters->erase( "bestmsrcoalescer" );
   }
   if ( parameters->count( "bestbestv" ) &&
        ( (*parameters)[ "bestbestv" ].isEmpty() ||
          (*parameters)[ "bestbestv" ] == "false" ) )
   {
      parameters->erase( "bestbestv" );
   }
   if ( parameters->count( "bestbestp" ) &&
        ( (*parameters)[ "bestbestp" ].isEmpty() ||
          (*parameters)[ "bestbestp" ] == "false" ) )
   {
      parameters->erase( "bestbestp" );
   }
   if ( parameters->count( "bestbestna" ) &&
        ( (*parameters)[ "bestbestna" ].isEmpty() ||
          (*parameters)[ "bestbestna" ] == "false" ) )
   {
      parameters->erase( "bestbestna" );
   }
   if ( parameters->count( "bestmsrradiifile" ) &&
        (*parameters)[ "bestmsrradiifile" ].isEmpty() )
   {
      parameters->erase( "bestmsrradiifile" );
   }
   if ( parameters->count( "bestmsrpatternfile" ) &&
        (*parameters)[ "bestmsrpatternfile" ].isEmpty() )
   {
      parameters->erase( "bestmsrpatternfile" );
   }

   global_Xpos -= 30;
   global_Ypos -= 30;
   e->accept();
}

void US_Hydrodyn_Cluster_Best::update_bestmsrprober( const QString & )
{
   ( *parameters )[ "bestmsrprober" ] = le_bestmsrprober->text();
}

void US_Hydrodyn_Cluster_Best::update_bestmsrfinenessangle( const QString & )
{
   ( *parameters )[ "bestmsrfinenessangle" ] = le_bestmsrfinenessangle->text();
}

void US_Hydrodyn_Cluster_Best::update_bestmsrmaxtriangles( const QString & )
{
   ( *parameters )[ "bestmsrmaxtriangles" ] = le_bestmsrmaxtriangles->text();
}

void US_Hydrodyn_Cluster_Best::update_bestrcoalnmin( const QString & )
{
   ( *parameters )[ "bestrcoalnmin" ] = le_bestrcoalnmin->text();
}

void US_Hydrodyn_Cluster_Best::update_bestrcoalnmax( const QString & )
{
   ( *parameters )[ "bestrcoalnmax" ] = le_bestrcoalnmax->text();
}

void US_Hydrodyn_Cluster_Best::update_bestrcoaln( const QString & )
{
   ( *parameters )[ "bestrcoaln" ] = le_bestrcoaln->text();
}

void US_Hydrodyn_Cluster_Best::update_bestbestmw( const QString & )
{
   ( *parameters )[ "bestbestmw" ] = le_bestbestmw->text();
}

void US_Hydrodyn_Cluster_Best::update_bestbestwatr( const QString & )
{
   ( *parameters )[ "bestbestwatr" ] = le_bestbestwatr->text();
}

void US_Hydrodyn_Cluster_Best::update_bestexpand( const QString & )
{
   ( *parameters )[ "bestexpand" ] = le_bestexpand->text();
}

void US_Hydrodyn_Cluster_Best::set_bestbestvc()
{
   ( *parameters )[ "bestbestvc" ] = cb_bestbestvc->isChecked() ? "true" : "false";
}
void US_Hydrodyn_Cluster_Best::hide_opt_label()
{
   hide_widgets( widgets_opt_label, widgets_opt_label.size() && widgets_opt_label[ 0 ]->isVisible() );
}

void US_Hydrodyn_Cluster_Best::hide_widgets( vector < QWidget * > w, bool do_hide, bool do_resize )
{
   for ( unsigned int i = 0; i < ( unsigned int )w.size(); i++ )
   {
       do_hide ? w[ i ]->hide() : w[ i ]->show();
   }
   if ( do_resize )
   {
       qApp->processEvents();
       resize( 0, 0 );
   }
}

void US_Hydrodyn_Cluster_Best::update_bestmsrcoalescer( const QString & )
{
   ( *parameters )[ "bestmsrcoalescer" ] = le_bestmsrcoalescer->text();
}

void US_Hydrodyn_Cluster_Best::set_bestbestv()
{
   ( *parameters )[ "bestbestv" ] = cb_bestbestv->isChecked() ? "true" : "false";
}

void US_Hydrodyn_Cluster_Best::set_bestbestp()
{
   ( *parameters )[ "bestbestp" ] = cb_bestbestp->isChecked() ? "true" : "false";
}

void US_Hydrodyn_Cluster_Best::set_bestbestna()
{
   ( *parameters )[ "bestbestna" ] = cb_bestbestna->isChecked() ? "true" : "false";
}

void US_Hydrodyn_Cluster_Best::update_bestmsrradiifile( const QString & )
{
   QString use_dir;
   ((US_Hydrodyn *)us_hydrodyn)->select_from_directory_history( use_dir, this );
   QString filename = Q3FileDialog::getOpenFileName(
                                                   use_dir,
                                                   QString::null,
                                                   this,
                                                   "open file dialog",
                                                   tr( "Select a file for MSROLL: manual radii file" )
                                                   );

   disconnect( le_bestmsrradiifile, SIGNAL( textChanged( const QString & ) ), 0, 0 );
   le_bestmsrradiifile->setText( filename );
   connect( le_bestmsrradiifile, SIGNAL( textChanged( const QString & ) ), SLOT( update_bestmsrradiifile( const QString & ) ) );
   if ( !filename.isEmpty() )
   {
      ((US_Hydrodyn *)us_hydrodyn)->add_to_directory_history( filename );
   }
   ( *parameters )[ "bestmsrradiifile" ] = le_bestmsrradiifile->text();
}

void US_Hydrodyn_Cluster_Best::update_bestmsrpatternfile( const QString & )
{
   QString use_dir;
   ((US_Hydrodyn *)us_hydrodyn)->select_from_directory_history( use_dir, this );
   QString filename = Q3FileDialog::getOpenFileName(
                                                   use_dir,
                                                   QString::null,
                                                   this,
                                                   "open file dialog",
                                                   tr( "Select a file for MSROLL: manual name pattern file (must also provide radii file above)" )
                                                   );

   disconnect( le_bestmsrpatternfile, SIGNAL( textChanged( const QString & ) ), 0, 0 );
   le_bestmsrpatternfile->setText( filename );
   connect( le_bestmsrpatternfile, SIGNAL( textChanged( const QString & ) ), SLOT( update_bestmsrpatternfile( const QString & ) ) );
   if ( !filename.isEmpty() )
   {
      ((US_Hydrodyn *)us_hydrodyn)->add_to_directory_history( filename );
   }
   ( *parameters )[ "bestmsrpatternfile" ] = le_bestmsrpatternfile->text();
}

void US_Hydrodyn_Cluster_Best::save()
{
   QString use_dir = ((US_Hydrodyn *)us_hydrodyn)->somo_dir + QDir::separator() + "cluster" + QDir::separator() + "parameters";
   ((US_Hydrodyn *)us_hydrodyn)->select_from_directory_history( use_dir, this, true );
   QString filename = Q3FileDialog::getSaveFileName( 
                                                   use_dir,
                                                   "*.cluster_best",
                                                   this,
                                                   tr( QString( "%1: Save" ).arg( "US-SOMO: BEST cluster interface" ) ),
                                                   tr( "Save the parameters" ) 
                                              );

   if( !filename.isEmpty() )
   {
      ((US_Hydrodyn *)us_hydrodyn)->add_to_directory_history( filename );
      if ( !filename.contains( QRegExp( "\\.cluster_best$" ) ) )
      {
         filename += ".cluster_best";
      }
      QFile f( filename );
      if ( !f.open( QIODevice::WriteOnly ) )
      {
         QMessageBox::information( this,
                                   tr( QString( "%1: Save" ).arg( "US-SOMO: BEST cluster interface" ) ),
                                   QString( tr( "Could not open file %1 for writing" ) )
                                   .arg( filename ) 
                                   );
         return;
      }
      Q3TextStream ts( &f );
      ts << US_Json::compose( *parameters );
      f.close();
   }
}

void US_Hydrodyn_Cluster_Best::load()
{
   QString use_dir = ((US_Hydrodyn *)us_hydrodyn)->somo_dir + QDir::separator() + "cluster" + QDir::separator() + "parameters";
   ((US_Hydrodyn *)us_hydrodyn)->select_from_directory_history( use_dir, this, true );
   QString filename = Q3FileDialog::getOpenFileName( 
                                                   use_dir,
                                                   "*.cluster_best",
                                                   this,
                                                   tr( QString( "%1: Open" ).arg( "US-SOMO: BEST cluster interface" ) ),
                                                   tr( "Load parameters" ) 
                                                  );
   if( !filename.isEmpty() )
   {
      ((US_Hydrodyn *)us_hydrodyn)->add_to_directory_history( filename );
      QFile f( filename );
      if ( !f.open( QIODevice::ReadOnly ) )
      {
          QMessageBox::information( 
                                    this,
                                    tr( QString( "%1: Open" ).arg( "US-SOMO: BEST cluster interface" ) ),
                                    QString( tr( "Could not open file %1 for reading" ) )
                                    .arg( filename ) 
                                    );
          return;
      }
      QString qs;
      Q3TextStream ts( &f );
      while ( !ts.atEnd() )
      {
          qs += ts.readLine();
      }
      f.close();
      *parameters = US_Json::split( qs );
      update_fields();
   }
}

void US_Hydrodyn_Cluster_Best::update_fields()
{
   le_bestmsrprober                                ->setText( parameters->count( "bestmsrprober" ) ? ( *parameters )[ "bestmsrprober" ] : "" );
   le_bestmsrfinenessangle                         ->setText( parameters->count( "bestmsrfinenessangle" ) ? ( *parameters )[ "bestmsrfinenessangle" ] : "" );
   le_bestmsrmaxtriangles                          ->setText( parameters->count( "bestmsrmaxtriangles" ) ? ( *parameters )[ "bestmsrmaxtriangles" ] : "" );
   le_bestrcoalnmin                                ->setText( parameters->count( "bestrcoalnmin" ) ? ( *parameters )[ "bestrcoalnmin" ] : "" );
   le_bestrcoalnmax                                ->setText( parameters->count( "bestrcoalnmax" ) ? ( *parameters )[ "bestrcoalnmax" ] : "" );
   le_bestrcoaln                                   ->setText( parameters->count( "bestrcoaln" ) ? ( *parameters )[ "bestrcoaln" ] : "" );
   le_bestbestmw                                   ->setText( parameters->count( "bestbestmw" ) ? ( *parameters )[ "bestbestmw" ] : "" );
   le_bestbestwatr                                 ->setText( parameters->count( "bestbestwatr" ) ? ( *parameters )[ "bestbestwatr" ] : "" );
   le_bestexpand                                   ->setText( parameters->count( "bestexpand" ) ? ( *parameters )[ "bestexpand" ] : "" );
   cb_bestbestvc                                   ->setChecked( parameters->count( "bestbestvc" ) && ( *parameters )[ "bestbestvc" ] == "true" ? true : false );
   le_bestmsrcoalescer                             ->setText( parameters->count( "bestmsrcoalescer" ) ? ( *parameters )[ "bestmsrcoalescer" ] : "" );
   cb_bestbestv                                    ->setChecked( parameters->count( "bestbestv" ) && ( *parameters )[ "bestbestv" ] == "true" ? true : false );
   cb_bestbestp                                    ->setChecked( parameters->count( "bestbestp" ) && ( *parameters )[ "bestbestp" ] == "true" ? true : false );
   cb_bestbestna                                   ->setChecked( parameters->count( "bestbestna" ) && ( *parameters )[ "bestbestna" ] == "true" ? true : false );
   disconnect( le_bestmsrradiifile, SIGNAL( textChanged( const QString & ) ), 0, 0 );
   le_bestmsrradiifile                             ->setText( parameters->count( "bestmsrradiifile" ) ? ( *parameters )[ "bestmsrradiifile" ] : "" );
   connect( le_bestmsrradiifile, SIGNAL( textChanged( const QString & ) ), SLOT( update_bestmsrradiifile( const QString & ) ) );
   disconnect( le_bestmsrpatternfile, SIGNAL( textChanged( const QString & ) ), 0, 0 );
   le_bestmsrpatternfile                           ->setText( parameters->count( "bestmsrpatternfile" ) ? ( *parameters )[ "bestmsrpatternfile" ] : "" );
   connect( le_bestmsrpatternfile, SIGNAL( textChanged( const QString & ) ), SLOT( update_bestmsrpatternfile( const QString & ) ) );
}

