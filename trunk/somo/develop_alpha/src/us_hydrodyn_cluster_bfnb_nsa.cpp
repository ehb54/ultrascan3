#include "../include/us3_defines.h"
// ---------------------------------------------------------------------------------------------
// --------------- WARNING: this code is generated by an automatic code generator --------------
// ---------------------------------------------------------------------------------------------
// -------------- WARNING: any modifications made to this code will be overwritten -------------
// ---------------------------------------------------------------------------------------------

#include "../include/us_hydrodyn_cluster_bfnb_nsa.h"
//Added by qt3to4:
#include <Q3TextStream>
#include <Q3HBoxLayout>
#include <QCloseEvent>
#include <Q3Frame>
#include <QLabel>
#include <Q3VBoxLayout>

US_Hydrodyn_Cluster_Bfnb_Nsa::US_Hydrodyn_Cluster_Bfnb_Nsa(
                                                           void                     *              us_hydrodyn,
                                                           map < QString, QString > *              parameters,
                                                           QWidget *                               p,
                                                           const char *                            name
                                                           ) : QDialog( p, name )
{
   this->us_hydrodyn                          = us_hydrodyn;
   this->parameters                           = parameters;

   USglobal = new US_Config();
   setPalette( PALET_FRAME );
   setCaption( tr( "US-SOMO: BNFB/NSA cluster interface" ) );

   setupGUI();

   global_Xpos += 30;
   global_Ypos += 30;

   setGeometry( global_Xpos, global_Ypos, 0, 0 );
}

US_Hydrodyn_Cluster_Bfnb_Nsa::~US_Hydrodyn_Cluster_Bfnb_Nsa()
{
}

void US_Hydrodyn_Cluster_Bfnb_Nsa::setupGUI()
{
   int minHeight1  = 30;

   lbl_title =  new QLabel      ( tr( "US-SOMO: BNFB/NSA cluster interface" ), this );
   lbl_title -> setFrameStyle   ( Q3Frame::WinPanel | Q3Frame::Raised );
   lbl_title -> setAlignment    ( Qt::AlignCenter | Qt::AlignVCenter );
   lbl_title -> setMinimumHeight( minHeight1 );
   lbl_title -> setPalette      ( PALET_FRAME );
   AUTFBACK( lbl_title );
   lbl_title -> setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize + 1, QFont::Bold ) );

   lbl_credits_1 =  new QLabel      ( "Cite: Brookes, E. BFNB 2013", this );
   lbl_credits_1 -> setAlignment    ( Qt::AlignCenter | Qt::AlignVCenter );
   lbl_credits_1 -> setMinimumHeight( minHeight1 );
   lbl_credits_1 -> setPalette      ( PALET_LABEL );
   AUTFBACK( lbl_credits_1 );
   lbl_credits_1 -> setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize+1, QFont::Bold ) );

   lbl_nsaspheres = new QLabel      ( tr( "Maximum number of spheres (count, optionally start end) " ), this );
   lbl_nsaspheres ->setAlignment    ( Qt::AlignLeft | Qt::AlignVCenter );
   lbl_nsaspheres ->setMinimumHeight( minHeight1 );
   lbl_nsaspheres ->setPalette      ( PALET_LABEL );
   AUTFBACK( lbl_nsaspheres );
   lbl_nsaspheres ->setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   lbl_nsaspheres ->setMinimumWidth ( QFontMetrics( lbl_nsaspheres->font() ).maxWidth() * 13 );

   le_nsaspheres = new QLineEdit     ( this, "nsaspheres Line Edit" );
   le_nsaspheres ->setText           ( parameters->count( "nsaspheres" ) ? ( *parameters )[ "nsaspheres" ] : "" );
   le_nsaspheres ->setAlignment      ( Qt::AlignCenter | Qt::AlignVCenter );
   le_nsaspheres ->setPalette        ( PALET_NORMAL );
   AUTFBACK( le_nsaspheres );
   le_nsaspheres ->setFont           ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
   le_nsaspheres ->setMinimumHeight  ( minHeight1 );
   le_nsaspheres ->setMinimumWidth   ( 150 );
   connect( le_nsaspheres, SIGNAL( textChanged( const QString & ) ), SLOT( update_nsaspheres( const QString & ) ) );

   lbl_nsaess = new QLabel      ( tr( "Every sphere the same size" ), this );
   lbl_nsaess ->setAlignment    ( Qt::AlignLeft | Qt::AlignVCenter );
   lbl_nsaess ->setMinimumHeight( minHeight1 );
   lbl_nsaess ->setPalette      ( PALET_LABEL );
   AUTFBACK( lbl_nsaess );
   lbl_nsaess ->setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   lbl_nsaess ->setMinimumWidth ( QFontMetrics( lbl_nsaess->font() ).maxWidth() * 13 );

   le_nsaess = new QLineEdit     ( this, "nsaess Line Edit" );
   le_nsaess ->setText           ( parameters->count( "nsaess" ) ? ( *parameters )[ "nsaess" ] : "" );
   le_nsaess ->setAlignment      ( Qt::AlignCenter | Qt::AlignVCenter );
   le_nsaess ->setPalette        ( PALET_NORMAL );
   AUTFBACK( le_nsaess );
   le_nsaess ->setFont           ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
   le_nsaess ->setMinimumHeight  ( minHeight1 );
   le_nsaess ->setMinimumWidth   ( 150 );
   connect( le_nsaess, SIGNAL( textChanged( const QString & ) ), SLOT( update_nsaess( const QString & ) ) );

   lbl_nsaexcl = new QLabel      ( tr( "Exclude overlaps {y|'blank'}" ), this );
   lbl_nsaexcl ->setAlignment    ( Qt::AlignLeft | Qt::AlignVCenter );
   lbl_nsaexcl ->setMinimumHeight( minHeight1 );
   lbl_nsaexcl ->setPalette      ( PALET_LABEL );
   AUTFBACK( lbl_nsaexcl );
   lbl_nsaexcl ->setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   lbl_nsaexcl ->setMinimumWidth ( QFontMetrics( lbl_nsaexcl->font() ).maxWidth() * 13 );

   le_nsaexcl = new QLineEdit     ( this, "nsaexcl Line Edit" );
   le_nsaexcl ->setText           ( parameters->count( "nsaexcl" ) ? ( *parameters )[ "nsaexcl" ] : "" );
   le_nsaexcl ->setAlignment      ( Qt::AlignCenter | Qt::AlignVCenter );
   le_nsaexcl ->setPalette        ( PALET_NORMAL );
   AUTFBACK( le_nsaexcl );
   le_nsaexcl ->setFont           ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
   le_nsaexcl ->setMinimumHeight  ( minHeight1 );
   le_nsaexcl ->setMinimumWidth   ( 150 );
   connect( le_nsaexcl, SIGNAL( textChanged( const QString & ) ), SLOT( update_nsaexcl( const QString & ) ) );

   lbl_nsaga = new QLabel      ( tr( "GA {y|'blank'}" ), this );
   lbl_nsaga ->setAlignment    ( Qt::AlignLeft | Qt::AlignVCenter );
   lbl_nsaga ->setMinimumHeight( minHeight1 );
   lbl_nsaga ->setPalette      ( PALET_LABEL );
   AUTFBACK( lbl_nsaga );
   lbl_nsaga ->setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   lbl_nsaga ->setMinimumWidth ( QFontMetrics( lbl_nsaga->font() ).maxWidth() * 13 );

   le_nsaga = new QLineEdit     ( this, "nsaga Line Edit" );
   le_nsaga ->setText           ( parameters->count( "nsaga" ) ? ( *parameters )[ "nsaga" ] : "" );
   le_nsaga ->setAlignment      ( Qt::AlignCenter | Qt::AlignVCenter );
   le_nsaga ->setPalette        ( PALET_NORMAL );
   AUTFBACK( le_nsaga );
   le_nsaga ->setFont           ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
   le_nsaga ->setMinimumHeight  ( minHeight1 );
   le_nsaga ->setMinimumWidth   ( 150 );
   connect( le_nsaga, SIGNAL( textChanged( const QString & ) ), SLOT( update_nsaga( const QString & ) ) );

   lbl_nsasga = new QLabel      ( tr( "SGA {y|'blank'}" ), this );
   lbl_nsasga ->setAlignment    ( Qt::AlignLeft | Qt::AlignVCenter );
   lbl_nsasga ->setMinimumHeight( minHeight1 );
   lbl_nsasga ->setPalette      ( PALET_LABEL );
   AUTFBACK( lbl_nsasga );
   lbl_nsasga ->setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   lbl_nsasga ->setMinimumWidth ( QFontMetrics( lbl_nsasga->font() ).maxWidth() * 13 );

   le_nsasga = new QLineEdit     ( this, "nsasga Line Edit" );
   le_nsasga ->setText           ( parameters->count( "nsasga" ) ? ( *parameters )[ "nsasga" ] : "" );
   le_nsasga ->setAlignment      ( Qt::AlignCenter | Qt::AlignVCenter );
   le_nsasga ->setPalette        ( PALET_NORMAL );
   AUTFBACK( le_nsasga );
   le_nsasga ->setFont           ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
   le_nsasga ->setMinimumHeight  ( minHeight1 );
   le_nsasga ->setMinimumWidth   ( 150 );
   connect( le_nsasga, SIGNAL( textChanged( const QString & ) ), SLOT( update_nsasga( const QString & ) ) );

   lbl_nsaiterations = new QLabel      ( tr( "Iterations" ), this );
   lbl_nsaiterations ->setAlignment    ( Qt::AlignLeft | Qt::AlignVCenter );
   lbl_nsaiterations ->setMinimumHeight( minHeight1 );
   lbl_nsaiterations ->setPalette      ( PALET_LABEL );
   AUTFBACK( lbl_nsaiterations );
   lbl_nsaiterations ->setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   lbl_nsaiterations ->setMinimumWidth ( QFontMetrics( lbl_nsaiterations->font() ).maxWidth() * 13 );

   le_nsaiterations = new QLineEdit     ( this, "nsaiterations Line Edit" );
   le_nsaiterations ->setText           ( parameters->count( "nsaiterations" ) ? ( *parameters )[ "nsaiterations" ] : "" );
   le_nsaiterations ->setAlignment      ( Qt::AlignCenter | Qt::AlignVCenter );
   le_nsaiterations ->setPalette        ( PALET_NORMAL );
   AUTFBACK( le_nsaiterations );
   le_nsaiterations ->setFont           ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
   le_nsaiterations ->setMinimumHeight  ( minHeight1 );
   le_nsaiterations ->setMinimumWidth   ( 150 );
   connect( le_nsaiterations, SIGNAL( textChanged( const QString & ) ), SLOT( update_nsaiterations( const QString & ) ) );

   lbl_nsaepsilon = new QLabel      ( tr( "Epsilon" ), this );
   lbl_nsaepsilon ->setAlignment    ( Qt::AlignLeft | Qt::AlignVCenter );
   lbl_nsaepsilon ->setMinimumHeight( minHeight1 );
   lbl_nsaepsilon ->setPalette      ( PALET_LABEL );
   AUTFBACK( lbl_nsaepsilon );
   lbl_nsaepsilon ->setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   lbl_nsaepsilon ->setMinimumWidth ( QFontMetrics( lbl_nsaepsilon->font() ).maxWidth() * 13 );

   le_nsaepsilon = new QLineEdit     ( this, "nsaepsilon Line Edit" );
   le_nsaepsilon ->setText           ( parameters->count( "nsaepsilon" ) ? ( *parameters )[ "nsaepsilon" ] : "" );
   le_nsaepsilon ->setAlignment      ( Qt::AlignCenter | Qt::AlignVCenter );
   le_nsaepsilon ->setPalette        ( PALET_NORMAL );
   AUTFBACK( le_nsaepsilon );
   le_nsaepsilon ->setFont           ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
   le_nsaepsilon ->setMinimumHeight  ( minHeight1 );
   le_nsaepsilon ->setMinimumWidth   ( 150 );
   connect( le_nsaepsilon, SIGNAL( textChanged( const QString & ) ), SLOT( update_nsaepsilon( const QString & ) ) );

   lbl_nsagsm = new QLabel      ( tr( "Gradient search method {cg|sd|ih}" ), this );
   lbl_nsagsm ->setAlignment    ( Qt::AlignLeft | Qt::AlignVCenter );
   lbl_nsagsm ->setMinimumHeight( minHeight1 );
   lbl_nsagsm ->setPalette      ( PALET_LABEL );
   AUTFBACK( lbl_nsagsm );
   lbl_nsagsm ->setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   lbl_nsagsm ->setMinimumWidth ( QFontMetrics( lbl_nsagsm->font() ).maxWidth() * 13 );

   le_nsagsm = new QLineEdit     ( this, "nsagsm Line Edit" );
   le_nsagsm ->setText           ( parameters->count( "nsagsm" ) ? ( *parameters )[ "nsagsm" ] : "" );
   le_nsagsm ->setAlignment      ( Qt::AlignCenter | Qt::AlignVCenter );
   le_nsagsm ->setPalette        ( PALET_NORMAL );
   AUTFBACK( le_nsagsm );
   le_nsagsm ->setFont           ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
   le_nsagsm ->setMinimumHeight  ( minHeight1 );
   le_nsagsm ->setMinimumWidth   ( 150 );
   connect( le_nsagsm, SIGNAL( textChanged( const QString & ) ), SLOT( update_nsagsm( const QString & ) ) );

   lbl_nsascale = new QLabel      ( tr( "Scale" ), this );
   lbl_nsascale ->setAlignment    ( Qt::AlignLeft | Qt::AlignVCenter );
   lbl_nsascale ->setMinimumHeight( minHeight1 );
   lbl_nsascale ->setPalette      ( PALET_LABEL );
   AUTFBACK( lbl_nsascale );
   lbl_nsascale ->setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   lbl_nsascale ->setMinimumWidth ( QFontMetrics( lbl_nsascale->font() ).maxWidth() * 13 );

   le_nsascale = new QLineEdit     ( this, "nsascale Line Edit" );
   le_nsascale ->setText           ( parameters->count( "nsascale" ) ? ( *parameters )[ "nsascale" ] : "" );
   le_nsascale ->setAlignment      ( Qt::AlignCenter | Qt::AlignVCenter );
   le_nsascale ->setPalette        ( PALET_NORMAL );
   AUTFBACK( le_nsascale );
   le_nsascale ->setFont           ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
   le_nsascale ->setMinimumHeight  ( minHeight1 );
   le_nsascale ->setMinimumWidth   ( 150 );
   connect( le_nsascale, SIGNAL( textChanged( const QString & ) ), SLOT( update_nsascale( const QString & ) ) );

   lbl_nsagenerations = new QLabel      ( tr( "GA: Generations" ), this );
   lbl_nsagenerations ->setAlignment    ( Qt::AlignLeft | Qt::AlignVCenter );
   lbl_nsagenerations ->setMinimumHeight( minHeight1 );
   lbl_nsagenerations ->setPalette      ( PALET_LABEL );
   AUTFBACK( lbl_nsagenerations );
   lbl_nsagenerations ->setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   lbl_nsagenerations ->setMinimumWidth ( QFontMetrics( lbl_nsagenerations->font() ).maxWidth() * 13 );

   le_nsagenerations = new QLineEdit     ( this, "nsagenerations Line Edit" );
   le_nsagenerations ->setText           ( parameters->count( "nsagenerations" ) ? ( *parameters )[ "nsagenerations" ] : "" );
   le_nsagenerations ->setAlignment      ( Qt::AlignCenter | Qt::AlignVCenter );
   le_nsagenerations ->setPalette        ( PALET_NORMAL );
   AUTFBACK( le_nsagenerations );
   le_nsagenerations ->setFont           ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
   le_nsagenerations ->setMinimumHeight  ( minHeight1 );
   le_nsagenerations ->setMinimumWidth   ( 150 );
   connect( le_nsagenerations, SIGNAL( textChanged( const QString & ) ), SLOT( update_nsagenerations( const QString & ) ) );

   lbl_nsapopulation = new QLabel      ( tr( "GA: Population" ), this );
   lbl_nsapopulation ->setAlignment    ( Qt::AlignLeft | Qt::AlignVCenter );
   lbl_nsapopulation ->setMinimumHeight( minHeight1 );
   lbl_nsapopulation ->setPalette      ( PALET_LABEL );
   AUTFBACK( lbl_nsapopulation );
   lbl_nsapopulation ->setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   lbl_nsapopulation ->setMinimumWidth ( QFontMetrics( lbl_nsapopulation->font() ).maxWidth() * 13 );

   le_nsapopulation = new QLineEdit     ( this, "nsapopulation Line Edit" );
   le_nsapopulation ->setText           ( parameters->count( "nsapopulation" ) ? ( *parameters )[ "nsapopulation" ] : "" );
   le_nsapopulation ->setAlignment      ( Qt::AlignCenter | Qt::AlignVCenter );
   le_nsapopulation ->setPalette        ( PALET_NORMAL );
   AUTFBACK( le_nsapopulation );
   le_nsapopulation ->setFont           ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
   le_nsapopulation ->setMinimumHeight  ( minHeight1 );
   le_nsapopulation ->setMinimumWidth   ( 150 );
   connect( le_nsapopulation, SIGNAL( textChanged( const QString & ) ), SLOT( update_nsapopulation( const QString & ) ) );

   lbl_nsaelitism = new QLabel      ( tr( "GA: Elitism" ), this );
   lbl_nsaelitism ->setAlignment    ( Qt::AlignLeft | Qt::AlignVCenter );
   lbl_nsaelitism ->setMinimumHeight( minHeight1 );
   lbl_nsaelitism ->setPalette      ( PALET_LABEL );
   AUTFBACK( lbl_nsaelitism );
   lbl_nsaelitism ->setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   lbl_nsaelitism ->setMinimumWidth ( QFontMetrics( lbl_nsaelitism->font() ).maxWidth() * 13 );

   le_nsaelitism = new QLineEdit     ( this, "nsaelitism Line Edit" );
   le_nsaelitism ->setText           ( parameters->count( "nsaelitism" ) ? ( *parameters )[ "nsaelitism" ] : "" );
   le_nsaelitism ->setAlignment      ( Qt::AlignCenter | Qt::AlignVCenter );
   le_nsaelitism ->setPalette        ( PALET_NORMAL );
   AUTFBACK( le_nsaelitism );
   le_nsaelitism ->setFont           ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
   le_nsaelitism ->setMinimumHeight  ( minHeight1 );
   le_nsaelitism ->setMinimumWidth   ( 150 );
   connect( le_nsaelitism, SIGNAL( textChanged( const QString & ) ), SLOT( update_nsaelitism( const QString & ) ) );

   lbl_nsamutate = new QLabel      ( tr( "GA: Mutate" ), this );
   lbl_nsamutate ->setAlignment    ( Qt::AlignLeft | Qt::AlignVCenter );
   lbl_nsamutate ->setMinimumHeight( minHeight1 );
   lbl_nsamutate ->setPalette      ( PALET_LABEL );
   AUTFBACK( lbl_nsamutate );
   lbl_nsamutate ->setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   lbl_nsamutate ->setMinimumWidth ( QFontMetrics( lbl_nsamutate->font() ).maxWidth() * 13 );

   le_nsamutate = new QLineEdit     ( this, "nsamutate Line Edit" );
   le_nsamutate ->setText           ( parameters->count( "nsamutate" ) ? ( *parameters )[ "nsamutate" ] : "" );
   le_nsamutate ->setAlignment      ( Qt::AlignCenter | Qt::AlignVCenter );
   le_nsamutate ->setPalette        ( PALET_NORMAL );
   AUTFBACK( le_nsamutate );
   le_nsamutate ->setFont           ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
   le_nsamutate ->setMinimumHeight  ( minHeight1 );
   le_nsamutate ->setMinimumWidth   ( 150 );
   connect( le_nsamutate, SIGNAL( textChanged( const QString & ) ), SLOT( update_nsamutate( const QString & ) ) );

   lbl_nsacrossover = new QLabel      ( tr( "GA: Crossover" ), this );
   lbl_nsacrossover ->setAlignment    ( Qt::AlignLeft | Qt::AlignVCenter );
   lbl_nsacrossover ->setMinimumHeight( minHeight1 );
   lbl_nsacrossover ->setPalette      ( PALET_LABEL );
   AUTFBACK( lbl_nsacrossover );
   lbl_nsacrossover ->setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   lbl_nsacrossover ->setMinimumWidth ( QFontMetrics( lbl_nsacrossover->font() ).maxWidth() * 13 );

   le_nsacrossover = new QLineEdit     ( this, "nsacrossover Line Edit" );
   le_nsacrossover ->setText           ( parameters->count( "nsacrossover" ) ? ( *parameters )[ "nsacrossover" ] : "" );
   le_nsacrossover ->setAlignment      ( Qt::AlignCenter | Qt::AlignVCenter );
   le_nsacrossover ->setPalette        ( PALET_NORMAL );
   AUTFBACK( le_nsacrossover );
   le_nsacrossover ->setFont           ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
   le_nsacrossover ->setMinimumHeight  ( minHeight1 );
   le_nsacrossover ->setMinimumWidth   ( 150 );
   connect( le_nsacrossover, SIGNAL( textChanged( const QString & ) ), SLOT( update_nsacrossover( const QString & ) ) );

   lbl_nsaearlytermination = new QLabel      ( tr( "GA: Early Termination" ), this );
   lbl_nsaearlytermination ->setAlignment    ( Qt::AlignLeft | Qt::AlignVCenter );
   lbl_nsaearlytermination ->setMinimumHeight( minHeight1 );
   lbl_nsaearlytermination ->setPalette      ( PALET_LABEL );
   AUTFBACK( lbl_nsaearlytermination );
   lbl_nsaearlytermination ->setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   lbl_nsaearlytermination ->setMinimumWidth ( QFontMetrics( lbl_nsaearlytermination->font() ).maxWidth() * 13 );

   le_nsaearlytermination = new QLineEdit     ( this, "nsaearlytermination Line Edit" );
   le_nsaearlytermination ->setText           ( parameters->count( "nsaearlytermination" ) ? ( *parameters )[ "nsaearlytermination" ] : "" );
   le_nsaearlytermination ->setAlignment      ( Qt::AlignCenter | Qt::AlignVCenter );
   le_nsaearlytermination ->setPalette        ( PALET_NORMAL );
   AUTFBACK( le_nsaearlytermination );
   le_nsaearlytermination ->setFont           ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
   le_nsaearlytermination ->setMinimumHeight  ( minHeight1 );
   le_nsaearlytermination ->setMinimumWidth   ( 150 );
   connect( le_nsaearlytermination, SIGNAL( textChanged( const QString & ) ), SLOT( update_nsaearlytermination( const QString & ) ) );

   lbl_sgpdistancequantum = new QLabel      ( tr( "Spheres: Distance quantum" ), this );
   lbl_sgpdistancequantum ->setAlignment    ( Qt::AlignLeft | Qt::AlignVCenter );
   lbl_sgpdistancequantum ->setMinimumHeight( minHeight1 );
   lbl_sgpdistancequantum ->setPalette      ( PALET_LABEL );
   AUTFBACK( lbl_sgpdistancequantum );
   lbl_sgpdistancequantum ->setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   lbl_sgpdistancequantum ->setMinimumWidth ( QFontMetrics( lbl_sgpdistancequantum->font() ).maxWidth() * 13 );

   le_sgpdistancequantum = new QLineEdit     ( this, "sgpdistancequantum Line Edit" );
   le_sgpdistancequantum ->setText           ( parameters->count( "sgpdistancequantum" ) ? ( *parameters )[ "sgpdistancequantum" ] : "" );
   le_sgpdistancequantum ->setAlignment      ( Qt::AlignCenter | Qt::AlignVCenter );
   le_sgpdistancequantum ->setPalette        ( PALET_NORMAL );
   AUTFBACK( le_sgpdistancequantum );
   le_sgpdistancequantum ->setFont           ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
   le_sgpdistancequantum ->setMinimumHeight  ( minHeight1 );
   le_sgpdistancequantum ->setMinimumWidth   ( 150 );
   connect( le_sgpdistancequantum, SIGNAL( textChanged( const QString & ) ), SLOT( update_sgpdistancequantum( const QString & ) ) );

   lbl_sgpdistancemin = new QLabel      ( tr( "Spheres: Minimum distance" ), this );
   lbl_sgpdistancemin ->setAlignment    ( Qt::AlignLeft | Qt::AlignVCenter );
   lbl_sgpdistancemin ->setMinimumHeight( minHeight1 );
   lbl_sgpdistancemin ->setPalette      ( PALET_LABEL );
   AUTFBACK( lbl_sgpdistancemin );
   lbl_sgpdistancemin ->setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   lbl_sgpdistancemin ->setMinimumWidth ( QFontMetrics( lbl_sgpdistancemin->font() ).maxWidth() * 13 );

   le_sgpdistancemin = new QLineEdit     ( this, "sgpdistancemin Line Edit" );
   le_sgpdistancemin ->setText           ( parameters->count( "sgpdistancemin" ) ? ( *parameters )[ "sgpdistancemin" ] : "" );
   le_sgpdistancemin ->setAlignment      ( Qt::AlignCenter | Qt::AlignVCenter );
   le_sgpdistancemin ->setPalette        ( PALET_NORMAL );
   AUTFBACK( le_sgpdistancemin );
   le_sgpdistancemin ->setFont           ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
   le_sgpdistancemin ->setMinimumHeight  ( minHeight1 );
   le_sgpdistancemin ->setMinimumWidth   ( 150 );
   connect( le_sgpdistancemin, SIGNAL( textChanged( const QString & ) ), SLOT( update_sgpdistancemin( const QString & ) ) );

   lbl_sgpdistancemax = new QLabel      ( tr( "Spheres: Maximum distance" ), this );
   lbl_sgpdistancemax ->setAlignment    ( Qt::AlignLeft | Qt::AlignVCenter );
   lbl_sgpdistancemax ->setMinimumHeight( minHeight1 );
   lbl_sgpdistancemax ->setPalette      ( PALET_LABEL );
   AUTFBACK( lbl_sgpdistancemax );
   lbl_sgpdistancemax ->setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   lbl_sgpdistancemax ->setMinimumWidth ( QFontMetrics( lbl_sgpdistancemax->font() ).maxWidth() * 13 );

   le_sgpdistancemax = new QLineEdit     ( this, "sgpdistancemax Line Edit" );
   le_sgpdistancemax ->setText           ( parameters->count( "sgpdistancemax" ) ? ( *parameters )[ "sgpdistancemax" ] : "" );
   le_sgpdistancemax ->setAlignment      ( Qt::AlignCenter | Qt::AlignVCenter );
   le_sgpdistancemax ->setPalette        ( PALET_NORMAL );
   AUTFBACK( le_sgpdistancemax );
   le_sgpdistancemax ->setFont           ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
   le_sgpdistancemax ->setMinimumHeight  ( minHeight1 );
   le_sgpdistancemax ->setMinimumWidth   ( 150 );
   connect( le_sgpdistancemax, SIGNAL( textChanged( const QString & ) ), SLOT( update_sgpdistancemax( const QString & ) ) );

   lbl_sgpradiusmin = new QLabel      ( tr( "Spheres: Minimum radius" ), this );
   lbl_sgpradiusmin ->setAlignment    ( Qt::AlignLeft | Qt::AlignVCenter );
   lbl_sgpradiusmin ->setMinimumHeight( minHeight1 );
   lbl_sgpradiusmin ->setPalette      ( PALET_LABEL );
   AUTFBACK( lbl_sgpradiusmin );
   lbl_sgpradiusmin ->setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   lbl_sgpradiusmin ->setMinimumWidth ( QFontMetrics( lbl_sgpradiusmin->font() ).maxWidth() * 13 );

   le_sgpradiusmin = new QLineEdit     ( this, "sgpradiusmin Line Edit" );
   le_sgpradiusmin ->setText           ( parameters->count( "sgpradiusmin" ) ? ( *parameters )[ "sgpradiusmin" ] : "" );
   le_sgpradiusmin ->setAlignment      ( Qt::AlignCenter | Qt::AlignVCenter );
   le_sgpradiusmin ->setPalette        ( PALET_NORMAL );
   AUTFBACK( le_sgpradiusmin );
   le_sgpradiusmin ->setFont           ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
   le_sgpradiusmin ->setMinimumHeight  ( minHeight1 );
   le_sgpradiusmin ->setMinimumWidth   ( 150 );
   connect( le_sgpradiusmin, SIGNAL( textChanged( const QString & ) ), SLOT( update_sgpradiusmin( const QString & ) ) );

   lbl_sgpradiusmax = new QLabel      ( tr( "Spheres: Maximum radius" ), this );
   lbl_sgpradiusmax ->setAlignment    ( Qt::AlignLeft | Qt::AlignVCenter );
   lbl_sgpradiusmax ->setMinimumHeight( minHeight1 );
   lbl_sgpradiusmax ->setPalette      ( PALET_LABEL );
   AUTFBACK( lbl_sgpradiusmax );
   lbl_sgpradiusmax ->setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize-1, QFont::Bold ) );
   lbl_sgpradiusmax ->setMinimumWidth ( QFontMetrics( lbl_sgpradiusmax->font() ).maxWidth() * 13 );

   le_sgpradiusmax = new QLineEdit     ( this, "sgpradiusmax Line Edit" );
   le_sgpradiusmax ->setText           ( parameters->count( "sgpradiusmax" ) ? ( *parameters )[ "sgpradiusmax" ] : "" );
   le_sgpradiusmax ->setAlignment      ( Qt::AlignCenter | Qt::AlignVCenter );
   le_sgpradiusmax ->setPalette        ( PALET_NORMAL );
   AUTFBACK( le_sgpradiusmax );
   le_sgpradiusmax ->setFont           ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
   le_sgpradiusmax ->setMinimumHeight  ( minHeight1 );
   le_sgpradiusmax ->setMinimumWidth   ( 150 );
   connect( le_sgpradiusmax, SIGNAL( textChanged( const QString & ) ), SLOT( update_sgpradiusmax( const QString & ) ) );

   pb_save =  new QPushButton ( tr( "Save" ), this );
   pb_save -> setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize + 1) );
   pb_save -> setMinimumHeight( minHeight1 );
   pb_save -> setPalette      ( PALET_PUSHB );
   connect( pb_save, SIGNAL( clicked() ), SLOT( save() ) );

   pb_load =  new QPushButton ( tr( "Load" ), this );
   pb_load -> setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize + 1) );
   pb_load -> setMinimumHeight( minHeight1 );
   pb_load -> setPalette      ( PALET_PUSHB );
   connect( pb_load, SIGNAL( clicked() ), SLOT( load() ) );

   pb_help =  new QPushButton ( tr( "Help" ), this );
   pb_help -> setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize + 1) );
   pb_help -> setMinimumHeight( minHeight1 );
   pb_help -> setPalette      ( PALET_PUSHB );
   connect( pb_help, SIGNAL( clicked() ), SLOT( help() ) );

   pb_close =  new QPushButton ( tr( "Close" ), this );
   pb_close -> setFont         ( QFont( USglobal->config_list.fontFamily, USglobal->config_list.fontSize + 1) );
   pb_close -> setMinimumHeight( minHeight1 );
   pb_close -> setPalette      ( PALET_PUSHB );
   connect( pb_close, SIGNAL( clicked() ), SLOT( cancel() ) );

   Q3VBoxLayout *background = new Q3VBoxLayout( this );
   background->addSpacing(4);

   background->addWidget( lbl_title );
   background->addWidget( lbl_credits_1 );
   background->addSpacing( 4 );
   Q3HBoxLayout * hbl = new Q3HBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( lbl_nsaspheres );
   hbl->addWidget( le_nsaspheres );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new Q3HBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( lbl_nsaess );
   hbl->addWidget( le_nsaess );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new Q3HBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( lbl_nsaexcl );
   hbl->addWidget( le_nsaexcl );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new Q3HBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( lbl_nsaga );
   hbl->addWidget( le_nsaga );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new Q3HBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( lbl_nsasga );
   hbl->addWidget( le_nsasga );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new Q3HBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( lbl_nsaiterations );
   hbl->addWidget( le_nsaiterations );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new Q3HBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( lbl_nsaepsilon );
   hbl->addWidget( le_nsaepsilon );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new Q3HBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( lbl_nsagsm );
   hbl->addWidget( le_nsagsm );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new Q3HBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( lbl_nsascale );
   hbl->addWidget( le_nsascale );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new Q3HBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( lbl_nsagenerations );
   hbl->addWidget( le_nsagenerations );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new Q3HBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( lbl_nsapopulation );
   hbl->addWidget( le_nsapopulation );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new Q3HBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( lbl_nsaelitism );
   hbl->addWidget( le_nsaelitism );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new Q3HBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( lbl_nsamutate );
   hbl->addWidget( le_nsamutate );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new Q3HBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( lbl_nsacrossover );
   hbl->addWidget( le_nsacrossover );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new Q3HBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( lbl_nsaearlytermination );
   hbl->addWidget( le_nsaearlytermination );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new Q3HBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( lbl_sgpdistancequantum );
   hbl->addWidget( le_sgpdistancequantum );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new Q3HBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( lbl_sgpdistancemin );
   hbl->addWidget( le_sgpdistancemin );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new Q3HBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( lbl_sgpdistancemax );
   hbl->addWidget( le_sgpdistancemax );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new Q3HBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( lbl_sgpradiusmin );
   hbl->addWidget( le_sgpradiusmin );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new Q3HBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( lbl_sgpradiusmax );
   hbl->addWidget( le_sgpradiusmax );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new Q3HBoxLayout( 0 );
   hbl->addSpacing( 4 );
   hbl->addWidget( pb_save );
   hbl->addWidget( pb_load );
   hbl->addSpacing( 4 );
   background->addLayout( hbl );
   hbl = new Q3HBoxLayout( 0 );
   hbl->addSpacing( 4 );


   Q3HBoxLayout *hbl_bottom = new Q3HBoxLayout( 0 );
   hbl_bottom->addSpacing( 4 );
   hbl_bottom->addWidget ( pb_help );
   hbl_bottom->addSpacing( 4 );
   hbl_bottom->addWidget ( pb_close );
   hbl_bottom->addSpacing( 4 );

   background->addLayout ( hbl_bottom );
   background->addSpacing( 4 );
   qApp->processEvents();
   resize( 0, 0 );
}

void US_Hydrodyn_Cluster_Bfnb_Nsa::cancel()
{
   close();
}

void US_Hydrodyn_Cluster_Bfnb_Nsa::help()
{
   US_Help *online_help;
   online_help = new US_Help( this );
   online_help->show_help("manual/bfnb_nsa.html");
}

void US_Hydrodyn_Cluster_Bfnb_Nsa::closeEvent( QCloseEvent *e )
{
   if ( parameters->count( "nsaspheres" ) &&
        (*parameters)[ "nsaspheres" ].isEmpty() )
   {
      parameters->erase( "nsaspheres" );
   }
   if ( parameters->count( "nsaess" ) &&
        (*parameters)[ "nsaess" ].isEmpty() )
   {
      parameters->erase( "nsaess" );
   }
   if ( parameters->count( "nsaexcl" ) &&
        (*parameters)[ "nsaexcl" ].isEmpty() )
   {
      parameters->erase( "nsaexcl" );
   }
   if ( parameters->count( "nsaga" ) &&
        (*parameters)[ "nsaga" ].isEmpty() )
   {
      parameters->erase( "nsaga" );
   }
   if ( parameters->count( "nsasga" ) &&
        (*parameters)[ "nsasga" ].isEmpty() )
   {
      parameters->erase( "nsasga" );
   }
   if ( parameters->count( "nsaiterations" ) &&
        (*parameters)[ "nsaiterations" ].isEmpty() )
   {
      parameters->erase( "nsaiterations" );
   }
   if ( parameters->count( "nsaepsilon" ) &&
        (*parameters)[ "nsaepsilon" ].isEmpty() )
   {
      parameters->erase( "nsaepsilon" );
   }
   if ( parameters->count( "nsagsm" ) &&
        (*parameters)[ "nsagsm" ].isEmpty() )
   {
      parameters->erase( "nsagsm" );
   }
   if ( parameters->count( "nsascale" ) &&
        (*parameters)[ "nsascale" ].isEmpty() )
   {
      parameters->erase( "nsascale" );
   }
   if ( parameters->count( "nsagenerations" ) &&
        (*parameters)[ "nsagenerations" ].isEmpty() )
   {
      parameters->erase( "nsagenerations" );
   }
   if ( parameters->count( "nsapopulation" ) &&
        (*parameters)[ "nsapopulation" ].isEmpty() )
   {
      parameters->erase( "nsapopulation" );
   }
   if ( parameters->count( "nsaelitism" ) &&
        (*parameters)[ "nsaelitism" ].isEmpty() )
   {
      parameters->erase( "nsaelitism" );
   }
   if ( parameters->count( "nsamutate" ) &&
        (*parameters)[ "nsamutate" ].isEmpty() )
   {
      parameters->erase( "nsamutate" );
   }
   if ( parameters->count( "nsacrossover" ) &&
        (*parameters)[ "nsacrossover" ].isEmpty() )
   {
      parameters->erase( "nsacrossover" );
   }
   if ( parameters->count( "nsaearlytermination" ) &&
        (*parameters)[ "nsaearlytermination" ].isEmpty() )
   {
      parameters->erase( "nsaearlytermination" );
   }
   if ( parameters->count( "sgpdistancequantum" ) &&
        (*parameters)[ "sgpdistancequantum" ].isEmpty() )
   {
      parameters->erase( "sgpdistancequantum" );
   }
   if ( parameters->count( "sgpdistancemin" ) &&
        (*parameters)[ "sgpdistancemin" ].isEmpty() )
   {
      parameters->erase( "sgpdistancemin" );
   }
   if ( parameters->count( "sgpdistancemax" ) &&
        (*parameters)[ "sgpdistancemax" ].isEmpty() )
   {
      parameters->erase( "sgpdistancemax" );
   }
   if ( parameters->count( "sgpradiusmin" ) &&
        (*parameters)[ "sgpradiusmin" ].isEmpty() )
   {
      parameters->erase( "sgpradiusmin" );
   }
   if ( parameters->count( "sgpradiusmax" ) &&
        (*parameters)[ "sgpradiusmax" ].isEmpty() )
   {
      parameters->erase( "sgpradiusmax" );
   }

   global_Xpos -= 30;
   global_Ypos -= 30;
   e->accept();
}

void US_Hydrodyn_Cluster_Bfnb_Nsa::update_nsaspheres( const QString & )
{
   ( *parameters )[ "nsaspheres" ] = le_nsaspheres->text();
}

void US_Hydrodyn_Cluster_Bfnb_Nsa::update_nsaess( const QString & )
{
   ( *parameters )[ "nsaess" ] = le_nsaess->text();
}

void US_Hydrodyn_Cluster_Bfnb_Nsa::update_nsaexcl( const QString & )
{
   ( *parameters )[ "nsaexcl" ] = le_nsaexcl->text();
}

void US_Hydrodyn_Cluster_Bfnb_Nsa::update_nsaga( const QString & )
{
   ( *parameters )[ "nsaga" ] = le_nsaga->text();
}

void US_Hydrodyn_Cluster_Bfnb_Nsa::update_nsasga( const QString & )
{
   ( *parameters )[ "nsasga" ] = le_nsasga->text();
}

void US_Hydrodyn_Cluster_Bfnb_Nsa::update_nsaiterations( const QString & )
{
   ( *parameters )[ "nsaiterations" ] = le_nsaiterations->text();
}

void US_Hydrodyn_Cluster_Bfnb_Nsa::update_nsaepsilon( const QString & )
{
   ( *parameters )[ "nsaepsilon" ] = le_nsaepsilon->text();
}

void US_Hydrodyn_Cluster_Bfnb_Nsa::update_nsagsm( const QString & )
{
   ( *parameters )[ "nsagsm" ] = le_nsagsm->text();
}

void US_Hydrodyn_Cluster_Bfnb_Nsa::update_nsascale( const QString & )
{
   ( *parameters )[ "nsascale" ] = le_nsascale->text();
}

void US_Hydrodyn_Cluster_Bfnb_Nsa::update_nsagenerations( const QString & )
{
   ( *parameters )[ "nsagenerations" ] = le_nsagenerations->text();
}

void US_Hydrodyn_Cluster_Bfnb_Nsa::update_nsapopulation( const QString & )
{
   ( *parameters )[ "nsapopulation" ] = le_nsapopulation->text();
}

void US_Hydrodyn_Cluster_Bfnb_Nsa::update_nsaelitism( const QString & )
{
   ( *parameters )[ "nsaelitism" ] = le_nsaelitism->text();
}

void US_Hydrodyn_Cluster_Bfnb_Nsa::update_nsamutate( const QString & )
{
   ( *parameters )[ "nsamutate" ] = le_nsamutate->text();
}

void US_Hydrodyn_Cluster_Bfnb_Nsa::update_nsacrossover( const QString & )
{
   ( *parameters )[ "nsacrossover" ] = le_nsacrossover->text();
}

void US_Hydrodyn_Cluster_Bfnb_Nsa::update_nsaearlytermination( const QString & )
{
   ( *parameters )[ "nsaearlytermination" ] = le_nsaearlytermination->text();
}

void US_Hydrodyn_Cluster_Bfnb_Nsa::update_sgpdistancequantum( const QString & )
{
   ( *parameters )[ "sgpdistancequantum" ] = le_sgpdistancequantum->text();
}

void US_Hydrodyn_Cluster_Bfnb_Nsa::update_sgpdistancemin( const QString & )
{
   ( *parameters )[ "sgpdistancemin" ] = le_sgpdistancemin->text();
}

void US_Hydrodyn_Cluster_Bfnb_Nsa::update_sgpdistancemax( const QString & )
{
   ( *parameters )[ "sgpdistancemax" ] = le_sgpdistancemax->text();
}

void US_Hydrodyn_Cluster_Bfnb_Nsa::update_sgpradiusmin( const QString & )
{
   ( *parameters )[ "sgpradiusmin" ] = le_sgpradiusmin->text();
}

void US_Hydrodyn_Cluster_Bfnb_Nsa::update_sgpradiusmax( const QString & )
{
   ( *parameters )[ "sgpradiusmax" ] = le_sgpradiusmax->text();
}

void US_Hydrodyn_Cluster_Bfnb_Nsa::save()
{
   QString use_dir = ((US_Hydrodyn *)us_hydrodyn)->somo_dir + QDir::separator() + "cluster" + QDir::separator() + "parameters";
   ((US_Hydrodyn *)us_hydrodyn)->select_from_directory_history( use_dir, this, true );
   QString filename = Q3FileDialog::getSaveFileName( 
                                                   use_dir,
                                                   "*.cluster_bfnb_nsa",
                                                   this,
                                                   tr( QString( "%1: Save" ).arg( "US-SOMO: BNFB/NSA cluster interface" ) ),
                                                   tr( "Save the parameters" ) 
                                              );

   if( !filename.isEmpty() )
   {
      ((US_Hydrodyn *)us_hydrodyn)->add_to_directory_history( filename );
      if ( !filename.contains( QRegExp( "\\.cluster_bfnb_nsa$" ) ) )
      {
         filename += ".cluster_bfnb_nsa";
      }
      QFile f( filename );
      if ( !f.open( QIODevice::WriteOnly ) )
      {
         QMessageBox::information( this,
                                   tr( QString( "%1: Save" ).arg( "US-SOMO: BNFB/NSA cluster interface" ) ),
                                   QString( tr( "Could not open file %1 for writing" ) )
                                   .arg( filename ) 
                                   );
         return;
      }
      Q3TextStream ts( &f );
      ts << US_Json::compose( *parameters );
      f.close();
   }
}

void US_Hydrodyn_Cluster_Bfnb_Nsa::load()
{
   QString use_dir = ((US_Hydrodyn *)us_hydrodyn)->somo_dir + QDir::separator() + "cluster" + QDir::separator() + "parameters";
   ((US_Hydrodyn *)us_hydrodyn)->select_from_directory_history( use_dir, this, true );
   QString filename = Q3FileDialog::getOpenFileName( 
                                                   use_dir,
                                                   "*.cluster_bfnb_nsa",
                                                   this,
                                                   tr( QString( "%1: Open" ).arg( "US-SOMO: BNFB/NSA cluster interface" ) ),
                                                   tr( "Load parameters" ) 
                                                  );
   if( !filename.isEmpty() )
   {
      ((US_Hydrodyn *)us_hydrodyn)->add_to_directory_history( filename );
      QFile f( filename );
      if ( !f.open( QIODevice::ReadOnly ) )
      {
          QMessageBox::information( 
                                    this,
                                    tr( QString( "%1: Open" ).arg( "US-SOMO: BNFB/NSA cluster interface" ) ),
                                    QString( tr( "Could not open file %1 for reading" ) )
                                    .arg( filename ) 
                                    );
          return;
      }
      QString qs;
      Q3TextStream ts( &f );
      while ( !ts.atEnd() )
      {
          qs += ts.readLine();
      }
      f.close();
      *parameters = US_Json::split( qs );
      update_fields();
   }
}

void US_Hydrodyn_Cluster_Bfnb_Nsa::update_fields()
{
   le_nsaspheres                                   ->setText( parameters->count( "nsaspheres" ) ? ( *parameters )[ "nsaspheres" ] : "" );
   le_nsaess                                       ->setText( parameters->count( "nsaess" ) ? ( *parameters )[ "nsaess" ] : "" );
   le_nsaexcl                                      ->setText( parameters->count( "nsaexcl" ) ? ( *parameters )[ "nsaexcl" ] : "" );
   le_nsaga                                        ->setText( parameters->count( "nsaga" ) ? ( *parameters )[ "nsaga" ] : "" );
   le_nsasga                                       ->setText( parameters->count( "nsasga" ) ? ( *parameters )[ "nsasga" ] : "" );
   le_nsaiterations                                ->setText( parameters->count( "nsaiterations" ) ? ( *parameters )[ "nsaiterations" ] : "" );
   le_nsaepsilon                                   ->setText( parameters->count( "nsaepsilon" ) ? ( *parameters )[ "nsaepsilon" ] : "" );
   le_nsagsm                                       ->setText( parameters->count( "nsagsm" ) ? ( *parameters )[ "nsagsm" ] : "" );
   le_nsascale                                     ->setText( parameters->count( "nsascale" ) ? ( *parameters )[ "nsascale" ] : "" );
   le_nsagenerations                               ->setText( parameters->count( "nsagenerations" ) ? ( *parameters )[ "nsagenerations" ] : "" );
   le_nsapopulation                                ->setText( parameters->count( "nsapopulation" ) ? ( *parameters )[ "nsapopulation" ] : "" );
   le_nsaelitism                                   ->setText( parameters->count( "nsaelitism" ) ? ( *parameters )[ "nsaelitism" ] : "" );
   le_nsamutate                                    ->setText( parameters->count( "nsamutate" ) ? ( *parameters )[ "nsamutate" ] : "" );
   le_nsacrossover                                 ->setText( parameters->count( "nsacrossover" ) ? ( *parameters )[ "nsacrossover" ] : "" );
   le_nsaearlytermination                          ->setText( parameters->count( "nsaearlytermination" ) ? ( *parameters )[ "nsaearlytermination" ] : "" );
   le_sgpdistancequantum                           ->setText( parameters->count( "sgpdistancequantum" ) ? ( *parameters )[ "sgpdistancequantum" ] : "" );
   le_sgpdistancemin                               ->setText( parameters->count( "sgpdistancemin" ) ? ( *parameters )[ "sgpdistancemin" ] : "" );
   le_sgpdistancemax                               ->setText( parameters->count( "sgpdistancemax" ) ? ( *parameters )[ "sgpdistancemax" ] : "" );
   le_sgpradiusmin                                 ->setText( parameters->count( "sgpradiusmin" ) ? ( *parameters )[ "sgpradiusmin" ] : "" );
   le_sgpradiusmax                                 ->setText( parameters->count( "sgpradiusmax" ) ? ( *parameters )[ "sgpradiusmax" ] : "" );
}

