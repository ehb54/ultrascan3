// ---------------------------------------------------------------------------------------------
// --------------- WARNING: this code is generated by an automatic code generator --------------
// ---------------------------------------------------------------------------------------------
// -------------- WARNING: any modifications made to this code will be overwritten -------------
// ---------------------------------------------------------------------------------------------

#include "../include/us_saxs_util.h"
#include "../include/us_cmdline_app.h"

bool US_Saxs_Util::run_crysol()
{
   errormsg = "";
   QStringList args;
   QStringList app_text;
   QStringList response;

   if ( control_parameters.count( "crysolpdb" ) )
   {
      QFileInfo fi( control_parameters[ "crysolpdb" ] );
      QString baseName = fi.baseName ( true  );
      if ( baseName.length() > 6 )
      {
          QString ext      = fi.extension( false );
          int     use_len  = 6;
          QString destname = baseName.left( use_len );
          int     copy     = 0;
          while ( QFile::exists( destname ) )
          {
             QString copy_str = QString( "%1" ).arg( copy );
             if ( copy_str.length() > 5 )
             {
                errormsg = 
                    QString( "Error: crysol: too many attempts to create unique 6 character name for %1" )
                    .arg( control_parameters[ "crysolpdb" ] );
                return false;
             }
             use_len = 6 - copy_str.length();
             destname = baseName.left( use_len ) + QString( "%1" ).arg( ++copy );
          }
          control_parameters[ "crysolpdb6" ] = 
              baseName.left( 6 ) + "." + ext;
      } else {
          control_parameters[ "crysolpdb6" ] = 
             control_parameters[ "crysolpdb" ];
      }
   } else {
      errormsg = "Error: crysol: parameter crysolpdb must be defined";
      return false;
   }
   if ( control_parameters.count( "crysolpdb6" ) )
   {
      QFileInfo fi( control_parameters[ "crysolpdb6" ] );
      control_parameters[ "crysolname" ] = fi.baseName( true );
   } else {
      errormsg = "Error: crysol: parameter crysolpdb6 must be defined";
      return false;
   }
   if ( !control_parameters.count( "crysolpdb" ) )
   {
      errormsg = 
         "Error: crysol: required parameter crysolpdb not defined";
      return false;
   }
   if ( control_parameters.count( "crysolmode" ) )
   {
      app_text << "Enter your option ...................... <";
      response << control_parameters[ "crysolmode" ];
   }
   if ( control_parameters.count( "crysolpdb" ) )
   {
      app_text << "Brookhaven file name ................... <";
      response << control_parameters[ "crysolpdb" ];
   }
   if ( control_parameters.count( "crysolharmonics" ) )
   {
      app_text << "Maximum order of  harmonics ........... <";
      response << control_parameters[ "crysolharmonics" ];
   }
   if ( control_parameters.count( "crysolfibgrid" ) )
   {
      app_text << "Order of Fibonacci grid ............... <";
      response << control_parameters[ "crysolfibgrid" ];
   }
   if ( control_parameters.count( "crysolmaxq" ) )
   {
      app_text << "Maximum s value ........................ <";
      response << control_parameters[ "crysolmaxq" ];
   }
   if ( control_parameters.count( "crysolpoints" ) )
   {
      app_text << "Number of points ...................... <";
      response << control_parameters[ "crysolpoints" ];
   }
   if ( control_parameters.count( "crysolexplicithydrogens" ) )
   {
      app_text << "Account for explicit hydrogens? [ Y / N ] <";
      response << control_parameters[ "crysolexplicithydrogens" ];
   }
   if ( control_parameters.count( "crysolfitexperiment" ) )
   {
      app_text << "Fit the experimental curve [ Y / N ] .. <";
      response << control_parameters[ "crysolfitexperiment" ];
   }
   if ( control_parameters.count( "crysoledensity" ) )
   {
      app_text << "Electron density of the solvent, e/A**3  <";
      response << control_parameters[ "crysoledensity" ];
   }
   if ( control_parameters.count( "crysolcontrast" ) )
   {
      app_text << "Contrast of the solvation shell ........ <";
      response << control_parameters[ "crysolcontrast" ];
   }
   if ( control_parameters.count( "crysolatomicradius" ) )
   {
      app_text << "Average atomic radius .................. <";
      response << control_parameters[ "crysolatomicradius" ];
   }
   if ( control_parameters.count( "crysolexcludedvolume" ) )
   {
      app_text << "Excluded Volume ........................ <";
      response << control_parameters[ "crysolexcludedvolume" ];
   }
   app_text << "Intensities    saved to file";
   response << "___run___";
   args     << "crysol";


   // check requireed parameters defined ?

   int argc = 0;
   // const char *argv0 = "us_saxs_util";
   // const char **argv = &argv0;
   char **argv = (char **)0;
   QApplication app( argc, argv, false );

   QString cla_error_msg;
   US_Cmdline_App cla(
                      &app,
                      "", // dir
                      args,
                      app_text,
                      response,
                      &cla_error_msg,
                      240000
                      );

   if ( !cla_error_msg.isEmpty() )
   {
      errormsg = cla_error_msg;
      return false;
   }

   app.exec();

   if ( !cla_error_msg.isEmpty() )
   {
      errormsg = "Error: run_crysol():" + cla_error_msg;
      return false;
   }
   if ( control_parameters.count( "crysolname" ) )
   {
      control_parameters[ "crysollog" ] = 
          control_parameters[ "crysolname" ] + "00.log";
   }
   if ( control_parameters.count( "crysolname" ) )
   {
      control_parameters[ "crysolint" ] = 
          control_parameters[ "crysolname" ] + "00.int";
   }
   if ( control_parameters.count( "crysolpdb" ) )
   {
      QFileInfo fi( control_parameters[ "crysolpdb" ] );
      control_parameters[ "crysolbasename" ] = fi.baseName( true );
   } else {
      errormsg = "Error: crysol: parameter crysolpdb must be defined";
      return false;
   }
   if ( control_parameters.count( "crysollog" ) &&
        control_parameters.count( "crysolbasename" ) )
   {
      QFileInfo fi( control_parameters[ "crysollog" ] );
      QString baseName = fi.baseName ( true  );
      QString ext      = fi.extension( false );

      if ( !fi.exists() )
      {
          errormsg = QString( "Error: crysol: the expected output file %1 does not exist" )
              .arg( control_parameters[ "crysollog" ] );
          return false;
      }

      int copy = 0;
      QString destfile = control_parameters[ "crysolbasename" ] + "." + ext;
      while ( QFile::exists( destfile ) )
      {
          destfile = control_parameters[ "crysolbasename" ] + QString( "_%1" ).arg( ++copy ) + "." + ext;
      }
      QDir qd;
      if ( !qd.rename( control_parameters[ "crysollog" ], destfile ) )
      {
          errormsg = QString( "Error renaming %1 to %2" )
              .arg( control_parameters[ "crysollog" ] )
              .arg( destfile );
          return false;
      }
      output_files << destfile;
   }
   if ( control_parameters.count( "crysolint" ) &&
        control_parameters.count( "crysolbasename" ) )
   {
      QFileInfo fi( control_parameters[ "crysolint" ] );
      QString baseName = fi.baseName ( true  );
      QString ext      = fi.extension( false );

      if ( !fi.exists() )
      {
          errormsg = QString( "Error: crysol: the expected output file %1 does not exist" )
              .arg( control_parameters[ "crysolint" ] );
          return false;
      }

      int copy = 0;
      QString destfile = control_parameters[ "crysolbasename" ] + "." + ext;
      while ( QFile::exists( destfile ) )
      {
          destfile = control_parameters[ "crysolbasename" ] + QString( "_%1" ).arg( ++copy ) + "." + ext;
      }
      QDir qd;
      if ( !qd.rename( control_parameters[ "crysolint" ], destfile ) )
      {
          errormsg = QString( "Error renaming %1 to %2" )
              .arg( control_parameters[ "crysolint" ] )
              .arg( destfile );
          return false;
      }
      output_files << destfile;
   }

   return true;
}
