// ---------------------------------------------------------------------------------------------
// --------------- WARNING: this code is generated by an automatic code generator --------------
// ---------------------------------------------------------------------------------------------
// -------------- WARNING: any modifications made to this code will be overwritten -------------
// ---------------------------------------------------------------------------------------------

#ifndef US_HYDRODYN_CLUSTER_BFNB_NSA_H
#define US_HYDRODYN_CLUSTER_BFNB_NSA_H

#include "us_hydrodyn_cluster.h"
#include "qlabel.h"
#include "qstring.h"
#include "qlayout.h"
#include "qlineedit.h"
#include "qfontmetrics.h"
#include "qpushbutton.h"
#include "q3filedialog.h"
#include "qmessagebox.h"
#include "qregexp.h"
//Added by qt3to4:
#include <QCloseEvent>
#include "us_json.h"
#include "us_hydrodyn.h"

using namespace std;

class US_EXTERN US_Hydrodyn_Cluster_Bfnb_Nsa : public QDialog
{
   Q_OBJECT

   public:
      US_Hydrodyn_Cluster_Bfnb_Nsa(
                                   void                     *              us_hydrodyn,
                                   map < QString, QString > *              parameters,
                                   QWidget *                               p = 0,
                                   const char *                            name = 0
                                   );

      ~US_Hydrodyn_Cluster_Bfnb_Nsa();

   private:

      US_Config *                             USglobal;

      QLabel *                                lbl_title;
      QLabel *                                lbl_credits_1;
      QLabel *                                lbl_nsaspheres;
      QLineEdit *                             le_nsaspheres;
      QLabel *                                lbl_nsaess;
      QLineEdit *                             le_nsaess;
      QLabel *                                lbl_nsaexcl;
      QLineEdit *                             le_nsaexcl;
      QLabel *                                lbl_nsaga;
      QLineEdit *                             le_nsaga;
      QLabel *                                lbl_nsasga;
      QLineEdit *                             le_nsasga;
      QLabel *                                lbl_nsaiterations;
      QLineEdit *                             le_nsaiterations;
      QLabel *                                lbl_nsaepsilon;
      QLineEdit *                             le_nsaepsilon;
      QLabel *                                lbl_nsagsm;
      QLineEdit *                             le_nsagsm;
      QLabel *                                lbl_nsascale;
      QLineEdit *                             le_nsascale;
      QLabel *                                lbl_nsagenerations;
      QLineEdit *                             le_nsagenerations;
      QLabel *                                lbl_nsapopulation;
      QLineEdit *                             le_nsapopulation;
      QLabel *                                lbl_nsaelitism;
      QLineEdit *                             le_nsaelitism;
      QLabel *                                lbl_nsamutate;
      QLineEdit *                             le_nsamutate;
      QLabel *                                lbl_nsacrossover;
      QLineEdit *                             le_nsacrossover;
      QLabel *                                lbl_nsaearlytermination;
      QLineEdit *                             le_nsaearlytermination;
      QLabel *                                lbl_sgpdistancequantum;
      QLineEdit *                             le_sgpdistancequantum;
      QLabel *                                lbl_sgpdistancemin;
      QLineEdit *                             le_sgpdistancemin;
      QLabel *                                lbl_sgpdistancemax;
      QLineEdit *                             le_sgpdistancemax;
      QLabel *                                lbl_sgpradiusmin;
      QLineEdit *                             le_sgpradiusmin;
      QLabel *                                lbl_sgpradiusmax;
      QLineEdit *                             le_sgpradiusmax;
      QPushButton *                           pb_save;
      QPushButton *                           pb_load;

      QPushButton *                           pb_help;
      QPushButton *                           pb_close;
      void                     *              us_hydrodyn;
      map < QString, QString > *              parameters;
      void                                    update_fields();


      void                                    setupGUI();

   private slots:

      void                                    update_nsaspheres( const QString & );
      void                                    update_nsaess( const QString & );
      void                                    update_nsaexcl( const QString & );
      void                                    update_nsaga( const QString & );
      void                                    update_nsasga( const QString & );
      void                                    update_nsaiterations( const QString & );
      void                                    update_nsaepsilon( const QString & );
      void                                    update_nsagsm( const QString & );
      void                                    update_nsascale( const QString & );
      void                                    update_nsagenerations( const QString & );
      void                                    update_nsapopulation( const QString & );
      void                                    update_nsaelitism( const QString & );
      void                                    update_nsamutate( const QString & );
      void                                    update_nsacrossover( const QString & );
      void                                    update_nsaearlytermination( const QString & );
      void                                    update_sgpdistancequantum( const QString & );
      void                                    update_sgpdistancemin( const QString & );
      void                                    update_sgpdistancemax( const QString & );
      void                                    update_sgpradiusmin( const QString & );
      void                                    update_sgpradiusmax( const QString & );
      void                                    save();
      void                                    load();

      void                                    help();
      void                                    cancel();

   protected slots:

      void                                    closeEvent( QCloseEvent * );
};

#endif
