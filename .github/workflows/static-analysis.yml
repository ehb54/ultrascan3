name: Static Analysis (Smart & Actionable)
on:
  push: &trigger_config
    branches: [ master ]
    paths:
      - 'gui/**/*.cpp'
      - 'gui/**/*.h'
      - 'programs/**/*.cpp'
      - 'programs/**/*.h'
      - 'utils/**/*.cpp'
      - 'utils/**/*.h'
      - '.github/workflows/static-analysis.yml'
      - 'CMakeLists.txt'
      - '**/CMakeLists.txt'
      - '**/*.cmake'
  pull_request:
    <<: *trigger_config #uses trigger definition from push
  workflow_dispatch:

jobs:
  static-analysis:
    runs-on: ubuntu-latest
    container:
      image: ehb1/us3comp:latest
      options: --cpus 2

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Allow CI to access repo directory
        run: git config --global --add safe.directory /__w/ultrascan3/ultrascan3

      - name: Get Changed Files
        id: changed-files
        run: |
          # For PRs, compare against the base branch
          # For pushes, compare against the previous commit
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            BASE_SHA="${{ github.event.pull_request.base.sha }}"
            HEAD_SHA="${{ github.event.pull_request.head.sha }}"
            echo "Comparing PR changes: $BASE_SHA..$HEAD_SHA"
            CHANGED_FILES=$(git diff --name-only $BASE_SHA..$HEAD_SHA)
          else
            # For push events, compare with the previous commit
            if [ "${{ github.event.before }}" != "0000000000000000000000000000000000000000" ]; then
              echo "Comparing push changes: ${{ github.event.before }}..${{ github.sha }}"
              CHANGED_FILES=$(git diff --name-only ${{ github.event.before }}..${{ github.sha }})
            else
              # First commit, analyze all files
              echo "First commit - analyzing all files"
              CHANGED_FILES=$(find gui utils programs -name "*.cpp" -o -name "*.h" 2>/dev/null || true)
            fi
          fi
          
          # Filter to only C++ files we care about
          CPP_FILES=$(echo "$CHANGED_FILES" | grep -E '\.(cpp|h)$' | grep -E '^(gui|utils|programs)/' || true)
          
          echo "Changed C++ files:"
          echo "$CPP_FILES"
          
          # Save to file for later steps
          echo "$CPP_FILES" > changed_cpp_files.txt
          
          # Count files - handle empty case properly
          if [ -n "$CPP_FILES" ] && [ "$CPP_FILES" != "" ]; then
            FILE_COUNT=$(echo "$CPP_FILES" | wc -l)
            # Remove any leading/trailing whitespace
            FILE_COUNT=$(echo "$FILE_COUNT" | tr -d ' ')
          else
            FILE_COUNT=0
          fi
          
          echo "CHANGED_FILE_COUNT=$FILE_COUNT" >> $GITHUB_ENV
          
          if [ "$FILE_COUNT" -eq 0 ]; then
            echo "No C++ files changed - static analysis will be skipped"
            echo "SKIP_ANALYSIS=true" >> $GITHUB_ENV
          else
            echo "Will analyze $FILE_COUNT changed C++ files"
            echo "SKIP_ANALYSIS=false" >> $GITHUB_ENV
          fi

      - name: Install Analysis Tools and CMake Dependencies
        if: env.SKIP_ANALYSIS != 'true'
        run: |
          apt-get update || true
          # Install CMake first - it's needed for everything
          apt-get install -y cmake || true
          apt-get install -y clang-tidy cppcheck clang-format libxml2-utils jq || true
          # Install all development libraries that CMake expects
          apt-get install -y libqwt-qt5-dev libarchive-dev libgl2ps-dev libssl-dev || true
          apt-get install -y iwyu ninja-build || true
          # Install comprehensive Qt5 development environment
          apt-get install -y qtbase5-dev qt5-qmake qt5-default || true
          apt-get install -y qttools5-dev qttools5-dev-tools || true

      - name: Setup Build Environment
        if: env.SKIP_ANALYSIS != 'true'
        run: |
          export ULTRASCAN=$(pwd)
          export us3=$(pwd)
          echo "ULTRASCAN=$(pwd)" >> $GITHUB_ENV
          echo "us3=$(pwd)" >> $GITHUB_ENV
          
          if [ -d programs/us ]; then
            (cd programs/us && sh revision.sh) || true
          fi

      - name: Configure with CMake and Generate Compile Commands
        if: env.SKIP_ANALYSIS != 'true'
        run: |
          echo "Configuring build with CMake..."
          # Clean any existing build cache to avoid path conflicts
          rm -rf build CMakeCache.txt
          mkdir -p build
          cd build
          
          # Set Qt environment
          export QT_SELECT=qt5
          
          cmake .. \
            -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
            -DCMAKE_BUILD_TYPE=Debug \
            -DCMAKE_VERBOSE_MAKEFILE=ON \
            -DQT_QMAKE_EXECUTABLE=$(which qmake) \
            -G "Unix Makefiles"
          
          if [ -f compile_commands.json ]; then
            cp compile_commands.json ../
            echo "Generated compile_commands.json with CMake"
            echo "Compile database contains $(jq length compile_commands.json) entries"
          else
            echo "Warning: Failed to generate compile_commands.json"
            exit 1
          fi
          cd ..

      - name: Run Critical Security Analysis
        if: env.SKIP_ANALYSIS != 'true'
        continue-on-error: true
        run: |
          if command -v clang-tidy >/dev/null 2>&1; then
            echo "Running critical security and correctness analysis..."
            clang-tidy --version
          
            if [ ! -s changed_cpp_files.txt ]; then
              echo "No changed files to analyze"
              echo '{"files": [], "summary": {"total_issues": 0, "files_with_issues": 0}}' > clang-tidy-results.json
              exit 0
            fi
          
            # Initialize results
            echo '{"files": [], "summary": {"total_issues": 0, "files_with_issues": 0}}' > clang-tidy-results.json
          
            TOTAL_ISSUES=0
            FILES_WITH_ISSUES=0
          
            # Create analysis summary file
            > clang-tidy-summary.txt
          
            if [ -f compile_commands.json ]; then
              echo "Using CMake-generated compile commands database"
          
              # Limit analysis to first 10 files for performance
              FILE_COUNT=$(wc -l < changed_cpp_files.txt)
              if [ "$FILE_COUNT" -gt 10 ]; then
                echo "Limiting analysis to first 10 files (found $FILE_COUNT total)"
                head -10 changed_cpp_files.txt > changed_cpp_files_limited.txt
                mv changed_cpp_files_limited.txt changed_cpp_files.txt
              fi
          
              while IFS= read -r file; do
                if [ -n "$file" ] && [ -f "$file" ]; then
                  echo "Analyzing: $file"
          
                  # Focus only on critical security and correctness issues
                  set +e  # Don't exit on clang-tidy errors
                  OUTPUT=$(timeout 60 clang-tidy "$file" \
                    -p . \
                    --checks="-*,clang-analyzer-core.*,clang-analyzer-security.*,bugprone-use-after-move,bugprone-dangling-handle,bugprone-assert-side-effect" \
                    --format-style=none \
                    2>&1 || true)
                  set -e
          
                  # Count actual warnings/errors
                  if [ -n "$OUTPUT" ]; then
                    FILE_ISSUES=$(echo "$OUTPUT" | grep -c "warning.*\[.*\]" 2>/dev/null || echo "0")
                    case "$FILE_ISSUES" in
                        ''|*[!0-9]*) FILE_ISSUES=0 ;;
                    esac
          
                    if [ "$FILE_ISSUES" -gt 0 ]; then
                      FILES_WITH_ISSUES=$((FILES_WITH_ISSUES + 1))
                      TOTAL_ISSUES=$((TOTAL_ISSUES + FILE_ISSUES))
          
                      echo "=== Critical Issues in $file ===" >> clang-tidy-summary.txt
                      echo "$OUTPUT" | grep -E "warning.*\[.*\]" | head -10 >> clang-tidy-summary.txt || true
                      echo "" >> clang-tidy-summary.txt
                    fi
                  fi
                fi
              done < changed_cpp_files.txt
            else
              echo "No compile_commands.json found - cannot proceed with analysis"
              exit 1
            fi
          
            # Update summary with counts
            jq --argjson total "$TOTAL_ISSUES" \
               --argjson files "$FILES_WITH_ISSUES" \
               '.summary.total_issues = $total | .summary.files_with_issues = $files' \
               clang-tidy-results.json > temp.json && mv temp.json clang-tidy-results.json || true
          
            echo "Critical analysis completed: $TOTAL_ISSUES issues in $FILES_WITH_ISSUES files"
          else
            echo "Clang-tidy not available"
            echo '{"files": [], "summary": {"total_issues": 0, "files_with_issues": 0}}' > clang-tidy-results.json
          fi

      - name: Run Cppcheck Analysis
        if: env.SKIP_ANALYSIS != 'true'
        continue-on-error: true
        run: |
          echo "Running Cppcheck analysis..."
          
          if [ ! -s changed_cpp_files.txt ]; then
            echo '<?xml version="1.0" encoding="UTF-8"?><results version="2"></results>' > cppcheck-report.xml
            exit 0
          fi
          
          # Create a list of files to analyze
          FILES_TO_ANALYZE=""
          while IFS= read -r file; do
            if [ -n "$file" ] && [ -f "$file" ]; then
              FILES_TO_ANALYZE="$FILES_TO_ANALYZE $file"
            fi
          done < changed_cpp_files.txt
          
          if [ -n "$FILES_TO_ANALYZE" ]; then
            # Focus on critical issues only
            timeout 300 cppcheck \
              --enable=error,warning \
              --inconclusive --xml --xml-version=2 \
              --suppress=missingIncludeSystem \
              --suppress=unmatchedSuppression \
              --suppress=unusedFunction \
              --library=qt --library=posix \
              --platform=unix64 \
              --max-ctu-depth=5 \
              -I./gui -I./utils -I./qwtplot3d/include \
              -DINTEL -DLINUX \
              $FILES_TO_ANALYZE 2> cppcheck-report.xml || true
          else
            echo '<?xml version="1.0" encoding="UTF-8"?><results version="2"></results>' > cppcheck-report.xml
          fi

      - name: Parse Analysis Results
        if: env.SKIP_ANALYSIS != 'true'
        continue-on-error: true
        run: |
          echo "Parsing analysis results..."
          
          # Parse Cppcheck results
          CPPCHECK_ERRORS=0
          CPPCHECK_WARNINGS=0
          
          if [ -f cppcheck-report.xml ] && [ -s cppcheck-report.xml ]; then
            TEMP_ERRORS=$(grep -c 'severity="error"' cppcheck-report.xml 2>/dev/null || echo "0")
            TEMP_WARNINGS=$(grep -c 'severity="warning"' cppcheck-report.xml 2>/dev/null || echo "0")
          
            # Validate numbers
            case "$TEMP_ERRORS" in
                ''|*[!0-9]*) CPPCHECK_ERRORS=0 ;;
                *) CPPCHECK_ERRORS="$TEMP_ERRORS" ;;
            esac
            case "$TEMP_WARNINGS" in
                ''|*[!0-9]*) CPPCHECK_WARNINGS=0 ;;
                *) CPPCHECK_WARNINGS="$TEMP_WARNINGS" ;;
            esac
          fi
          
          echo "CPPCHECK_ERRORS=$CPPCHECK_ERRORS" >> $GITHUB_ENV
          echo "CPPCHECK_WARNINGS=$CPPCHECK_WARNINGS" >> $GITHUB_ENV
          
          # Extract top Cppcheck issues
          if [ -f cppcheck-report.xml ] && [ -s cppcheck-report.xml ]; then
            if [ "$CPPCHECK_ERRORS" -gt 0 ] || [ "$CPPCHECK_WARNINGS" -gt 0 ]; then
              echo "=== Cppcheck Critical Issues ===" > cppcheck-summary.txt
              xmllint --xpath "//error[@severity='error']" cppcheck-report.xml 2>/dev/null | head -5 >> cppcheck-summary.txt || true
              xmllint --xpath "//error[@severity='warning']" cppcheck-report.xml 2>/dev/null | head -5 >> cppcheck-summary.txt || true
            fi
          fi

      - name: Generate PR Comment
        if: env.SKIP_ANALYSIS != 'true'
        continue-on-error: true
        run: |
          # Read clang-tidy results
          CLANG_TIDY_TOTAL=0
          CLANG_TIDY_FILES=0
          
          if [ -f clang-tidy-results.json ]; then
            if jq empty clang-tidy-results.json >/dev/null 2>&1; then
              TEMP_TOTAL=$(jq -r '.summary.total_issues // 0' clang-tidy-results.json 2>/dev/null || echo "0")
              TEMP_FILES=$(jq -r '.summary.files_with_issues // 0' clang-tidy-results.json 2>/dev/null || echo "0")
          
              case "$TEMP_TOTAL" in
                  ''|*[!0-9]*) CLANG_TIDY_TOTAL=0 ;;
                  *) CLANG_TIDY_TOTAL="$TEMP_TOTAL" ;;
              esac
              case "$TEMP_FILES" in
                  ''|*[!0-9]*) CLANG_TIDY_FILES=0 ;;
                  *) CLANG_TIDY_FILES="$TEMP_FILES" ;;
              esac
            fi
          fi
          
          # Determine status text
          if [ $CLANG_TIDY_TOTAL -eq 0 ]; then
            CLANG_TIDY_STATUS="Clean"
          else
            CLANG_TIDY_STATUS="Needs attention"
          fi
          
          if [ $CPPCHECK_ERRORS -eq 0 ]; then
            CPPCHECK_STATUS="Clean"
          else
            CPPCHECK_STATUS="Needs attention"
          fi
          
          # Generate summary using printf (safer than heredoc in YAML)
          printf "## Static Analysis Results\n\n" > pr-comment.md
          printf "**Files analyzed:** %s changed files\n\n" "$CHANGED_FILE_COUNT" >> pr-comment.md
          printf "### Summary\n" >> pr-comment.md
          printf "| Tool | Critical Issues | Status |\n" >> pr-comment.md
          printf "|------|-----------------|--------|\n" >> pr-comment.md
          printf "| Clang-Tidy | %s | %s |\n" "$CLANG_TIDY_TOTAL" "$CLANG_TIDY_STATUS" >> pr-comment.md
          printf "| Cppcheck | %s | %s |\n" "$(($CPPCHECK_ERRORS + $CPPCHECK_WARNINGS))" "$CPPCHECK_STATUS" >> pr-comment.md
          printf "\n**Focus:** Security vulnerabilities, null pointer issues, use-after-free, crashes\n\n" >> pr-comment.md
          
          # Add issues section if there are any
          if [ $CLANG_TIDY_TOTAL -gt 0 ] || [ $((CPPCHECK_ERRORS + CPPCHECK_WARNINGS)) -gt 0 ]; then
            printf "### Critical Issues Found\n\n" >> pr-comment.md
          
            # Add Clang-Tidy issues
            if [ -f clang-tidy-summary.txt ] && [ $CLANG_TIDY_TOTAL -gt 0 ]; then
              printf "#### Security/Correctness Issues (%s)\n" "$CLANG_TIDY_TOTAL" >> pr-comment.md
              printf '```\n' >> pr-comment.md
              head -20 clang-tidy-summary.txt >> pr-comment.md
              printf '```\n\n' >> pr-comment.md
            fi
          
            # Add Cppcheck issues
            if [ -f cppcheck-summary.txt ] && [ $((CPPCHECK_ERRORS + CPPCHECK_WARNINGS)) -gt 0 ]; then
              printf "#### Static Analysis Issues (%s errors, %s warnings)\n" "$CPPCHECK_ERRORS" "$CPPCHECK_WARNINGS" >> pr-comment.md
              printf '```\n' >> pr-comment.md
              head -10 cppcheck-summary.txt >> pr-comment.md
              printf '```\n\n' >> pr-comment.md
            fi
          else
            printf "### Excellent!\n\n" >> pr-comment.md
            printf "No critical security or correctness issues found in the changed files.\n\n" >> pr-comment.md
          fi
          
          # Add footer
          printf "\n---\n" >> pr-comment.md
          printf "*Analysis focused on critical issues only: security vulnerabilities, crashes, memory safety*\n" >> pr-comment.md

      - name: Generate Skip Analysis Comment
        if: env.SKIP_ANALYSIS == 'true'
        run: |
          printf "## Static Analysis Results\n\n" > pr-comment.md
          printf "**No C++ files were changed in this PR** - static analysis was skipped.\n\n" >> pr-comment.md
          printf "Only changes to documentation, configuration, or non-C++ files were detected.\n" >> pr-comment.md

      - name: Display Results Summary
        if: always()
        run: |
          echo "=== CRITICAL SECURITY ANALYSIS COMPLETE ==="
          echo ""
          
          if [ "$SKIP_ANALYSIS" = "true" ]; then
            echo "No C++ files changed - analysis was skipped"
          else
            echo "Files analyzed: $CHANGED_FILE_COUNT"
          
            if [ -f clang-tidy-results.json ]; then
              TOTAL=$(jq -r '.summary.total_issues // 0' clang-tidy-results.json)
              FILES=$(jq -r '.summary.files_with_issues // 0' clang-tidy-results.json)
              echo "Critical issues found: $TOTAL issues in $FILES files"
            fi
          
            if [ -n "${CPPCHECK_ERRORS:-}" ]; then
              echo "Cppcheck: ${CPPCHECK_ERRORS:-0} errors, ${CPPCHECK_WARNINGS:-0} warnings"
            fi
          fi
          
          echo ""
          echo "PR Comment preview:"
          echo "==================="
          cat pr-comment.md || echo "No PR comment generated"

      - name: Upload Analysis Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: critical-analysis-reports
          path: |
            clang-tidy-results.json
            clang-tidy-summary.txt
            cppcheck-report.xml
            cppcheck-summary.txt
            pr-comment.md
            changed_cpp_files.txt
            compile_commands.json

      - name: Comment PR with Results
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        continue-on-error: true
        with:
          script: |
            const fs = require('fs');
            
            if (!fs.existsSync('pr-comment.md')) {
              console.log('No PR comment file found');
              return;
            }
            
            const comment = fs.readFileSync('pr-comment.md', 'utf8');
            
            // Check if we already commented on this PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            // Look for existing static analysis comment
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Static Analysis Results')
            );
            
            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
              console.log('Updated existing static analysis comment');
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
              console.log('Created new static analysis comment');
            }

      - name: Set Analysis Status
        if: env.SKIP_ANALYSIS != 'true'
        run: |
          # Report findings as informational only - never fail the build
          
          if [ -f clang-tidy-results.json ]; then
            TOTAL=$(jq -r '.summary.total_issues // 0' clang-tidy-results.json)
          
            if [ "$TOTAL" -gt 0 ]; then
              echo "::notice::Found $TOTAL critical security/correctness issues - please review"
            fi
          fi
          
          if [ -n "${CPPCHECK_ERRORS:-}" ] && [ "${CPPCHECK_ERRORS:-0}" -gt 0 ]; then
            echo "::notice::Found ${CPPCHECK_ERRORS} Cppcheck critical errors - please review"
          fi
          
          echo "Critical security analysis completed - all findings are informational only"