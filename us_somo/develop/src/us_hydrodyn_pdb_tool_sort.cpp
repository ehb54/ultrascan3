// ---------------------------------------------------------------------------------------------
// --------------- WARNING: this code is generated by an automatic code
// generator --------------
// ---------------------------------------------------------------------------------------------
// -------------- WARNING: any modifications made to this code will be
// overwritten -------------
// ---------------------------------------------------------------------------------------------

#include "../include/us_hydrodyn_pdb_tool_sort.h"
// Added by qt3to4:
#include <QCloseEvent>
#include <QFrame>
#include <QHBoxLayout>
#include <QLabel>
#include <QVBoxLayout>

US_Hydrodyn_Pdb_Tool_Sort::US_Hydrodyn_Pdb_Tool_Sort(
    void *us_hydrodyn, map<QString, QString> *parameters, QWidget *p,
    const char *)
    : QDialog(p) {
  this->us_hydrodyn = us_hydrodyn;
  this->parameters = parameters;

  USglobal = new US_Config();
  setPalette(PALET_FRAME);
  setWindowTitle(
      us_tr("US-SOMO: PDB Editor: Sort by residue aggregate distance"));

  setupGUI();

  global_Xpos += 30;
  global_Ypos += 30;

  setGeometry(global_Xpos, global_Ypos, 0, 0);
}

US_Hydrodyn_Pdb_Tool_Sort::~US_Hydrodyn_Pdb_Tool_Sort() {}

void US_Hydrodyn_Pdb_Tool_Sort::setupGUI() {
  int minHeight1 = 30;

  lbl_title = new QLabel(
      us_tr("US-SOMO: PDB Editor: Sort by residue aggregate distance"), this);
  lbl_title->setFrameStyle(QFrame::WinPanel | QFrame::Raised);
  lbl_title->setAlignment(Qt::AlignCenter | Qt::AlignVCenter);
  lbl_title->setMinimumHeight(minHeight1);
  lbl_title->setPalette(PALET_FRAME);
  lbl_title->setFont(QFont(USglobal->config_list.fontFamily,
                           USglobal->config_list.fontSize + 1, QFont::Bold));

  lbl_credits_1 = new QLabel("Cite: US-SOMO", this);
  lbl_credits_1->setAlignment(Qt::AlignCenter | Qt::AlignVCenter);
  lbl_credits_1->setMinimumHeight(minHeight1);
  lbl_credits_1->setPalette(PALET_LABEL);
  lbl_credits_1->setFont(QFont(USglobal->config_list.fontFamily,
                               USglobal->config_list.fontSize + 1,
                               QFont::Bold));

  lbl_residuesa =
      new QLabel(us_tr("Residue list A (chain:residue{-residue}{,..}"), this);
  lbl_residuesa->setAlignment(Qt::AlignLeft | Qt::AlignVCenter);
  lbl_residuesa->setMinimumHeight(minHeight1);
  lbl_residuesa->setPalette(PALET_LABEL);
  lbl_residuesa->setFont(QFont(USglobal->config_list.fontFamily,
                               USglobal->config_list.fontSize - 1,
                               QFont::Bold));
  lbl_residuesa->setMinimumWidth(
      QFontMetrics(lbl_residuesa->font()).maxWidth() * 15);

  le_residuesa = new QLineEdit(this);
  le_residuesa->setObjectName("residuesa Line Edit");
  le_residuesa->setText(
      parameters->count("residuesa") ? (*parameters)["residuesa"] : "");
  le_residuesa->setAlignment(Qt::AlignCenter | Qt::AlignVCenter);
  le_residuesa->setPalette(PALET_NORMAL);
  le_residuesa->setFont(
      QFont(USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
  le_residuesa->setMinimumHeight(minHeight1);
  le_residuesa->setMinimumWidth(150);
  connect(le_residuesa, SIGNAL(textChanged(const QString &)),
          SLOT(update_residuesa(const QString &)));

  lbl_residuesb =
      new QLabel(us_tr("Residue list B (chain:residue{-residue}{,..}"), this);
  lbl_residuesb->setAlignment(Qt::AlignLeft | Qt::AlignVCenter);
  lbl_residuesb->setMinimumHeight(minHeight1);
  lbl_residuesb->setPalette(PALET_LABEL);
  lbl_residuesb->setFont(QFont(USglobal->config_list.fontFamily,
                               USglobal->config_list.fontSize - 1,
                               QFont::Bold));
  lbl_residuesb->setMinimumWidth(
      QFontMetrics(lbl_residuesb->font()).maxWidth() * 15);

  le_residuesb = new QLineEdit(this);
  le_residuesb->setObjectName("residuesb Line Edit");
  le_residuesb->setText(
      parameters->count("residuesb") ? (*parameters)["residuesb"] : "");
  le_residuesb->setAlignment(Qt::AlignCenter | Qt::AlignVCenter);
  le_residuesb->setPalette(PALET_NORMAL);
  le_residuesb->setFont(
      QFont(USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
  le_residuesb->setMinimumHeight(minHeight1);
  le_residuesb->setMinimumWidth(150);
  connect(le_residuesb, SIGNAL(textChanged(const QString &)),
          SLOT(update_residuesb(const QString &)));

  lbl_reportcount = new QLabel(us_tr("Number to list (default:blank="
                                     "All"
                                     ")"),
                               this);
  lbl_reportcount->setAlignment(Qt::AlignLeft | Qt::AlignVCenter);
  lbl_reportcount->setMinimumHeight(minHeight1);
  lbl_reportcount->setPalette(PALET_LABEL);
  lbl_reportcount->setFont(QFont(USglobal->config_list.fontFamily,
                                 USglobal->config_list.fontSize - 1,
                                 QFont::Bold));
  lbl_reportcount->setMinimumWidth(
      QFontMetrics(lbl_reportcount->font()).maxWidth() * 15);

  le_reportcount = new QLineEdit(this);
  le_reportcount->setObjectName("reportcount Line Edit");
  le_reportcount->setText(
      parameters->count("reportcount") ? (*parameters)["reportcount"] : "");
  le_reportcount->setAlignment(Qt::AlignCenter | Qt::AlignVCenter);
  le_reportcount->setPalette(PALET_NORMAL);
  le_reportcount->setFont(
      QFont(USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
  le_reportcount->setMinimumHeight(minHeight1);
  le_reportcount->setMinimumWidth(150);
  connect(le_reportcount, SIGNAL(textChanged(const QString &)),
          SLOT(update_reportcount(const QString &)));

  cb_order =
      new QCheckBox(us_tr("Sort by maximum aggregate distance first"), this);
  cb_order->setMinimumHeight(minHeight1);
  cb_order->setPalette(PALET_NORMAL);
  cb_order->setFont(QFont(USglobal->config_list.fontFamily,
                          USglobal->config_list.fontSize - 1, QFont::Bold));
  cb_order->setMinimumWidth(QFontMetrics(cb_order->font()).maxWidth() * 15);

  cb_order->setChecked(
      parameters->count("order") && (*parameters)["order"] == "true" ? true
                                                                     : false);
  connect(cb_order, SIGNAL(clicked()), SLOT(set_order()));

  cb_caonly = new QCheckBox(us_tr("Only use CA for distances"), this);
  cb_caonly->setMinimumHeight(minHeight1);
  cb_caonly->setPalette(PALET_NORMAL);
  cb_caonly->setFont(QFont(USglobal->config_list.fontFamily,
                           USglobal->config_list.fontSize - 1, QFont::Bold));
  cb_caonly->setMinimumWidth(QFontMetrics(cb_caonly->font()).maxWidth() * 15);

  cb_caonly->setChecked(
      parameters->count("caonly") && (*parameters)["caonly"] == "true" ? true
                                                                       : false);
  connect(cb_caonly, SIGNAL(clicked()), SLOT(set_caonly()));

  pb_help = new QPushButton(us_tr("Help"), this);
  pb_help->setFont(QFont(USglobal->config_list.fontFamily,
                         USglobal->config_list.fontSize + 1));
  pb_help->setMinimumHeight(minHeight1);
  pb_help->setPalette(PALET_PUSHB);
  connect(pb_help, SIGNAL(clicked()), SLOT(help()));

  pb_close = new QPushButton(us_tr("Close"), this);
  pb_close->setFont(QFont(USglobal->config_list.fontFamily,
                          USglobal->config_list.fontSize + 1));
  pb_close->setMinimumHeight(minHeight1);
  pb_close->setPalette(PALET_PUSHB);
  connect(pb_close, SIGNAL(clicked()), SLOT(cancel()));

  QVBoxLayout *background = new QVBoxLayout(this);
  background->setContentsMargins(0, 0, 0, 0);
  background->setSpacing(0);
  background->addSpacing(4);

  background->addWidget(lbl_title);
  background->addWidget(lbl_credits_1);
  background->addSpacing(4);
  QHBoxLayout *hbl = new QHBoxLayout();
  hbl->setContentsMargins(0, 0, 0, 0);
  hbl->setSpacing(0);
  hbl->addSpacing(4);
  hbl->addWidget(lbl_residuesa);
  hbl->addWidget(le_residuesa);
  hbl->addSpacing(4);
  background->addLayout(hbl);
  hbl = new QHBoxLayout();
  hbl->addSpacing(4);
  hbl->addWidget(lbl_residuesb);
  hbl->addWidget(le_residuesb);
  hbl->addSpacing(4);
  background->addLayout(hbl);
  hbl = new QHBoxLayout();
  hbl->addSpacing(4);
  hbl->addWidget(lbl_reportcount);
  hbl->addWidget(le_reportcount);
  hbl->addSpacing(4);
  background->addLayout(hbl);
  hbl = new QHBoxLayout();
  hbl->addSpacing(4);
  hbl->addWidget(cb_order);
  hbl->addSpacing(4);
  background->addLayout(hbl);
  hbl = new QHBoxLayout();
  hbl->addSpacing(4);
  hbl->addWidget(cb_caonly);
  hbl->addSpacing(4);
  background->addLayout(hbl);
  hbl = new QHBoxLayout();
  hbl->addSpacing(4);

  QHBoxLayout *hbl_bottom = new QHBoxLayout();
  hbl_bottom->setContentsMargins(0, 0, 0, 0);
  hbl_bottom->setSpacing(0);
  hbl_bottom->addSpacing(4);
  hbl_bottom->addWidget(pb_help);
  hbl_bottom->addSpacing(4);
  hbl_bottom->addWidget(pb_close);
  hbl_bottom->addSpacing(4);

  background->addLayout(hbl_bottom);
  background->addSpacing(4);
}

void US_Hydrodyn_Pdb_Tool_Sort::cancel() { close(); }

void US_Hydrodyn_Pdb_Tool_Sort::help() {
  US_Help *online_help;
  online_help = new US_Help(this);
  online_help->show_help("manual/somo/pdb_tool_sort.html");
}

void US_Hydrodyn_Pdb_Tool_Sort::closeEvent(QCloseEvent *e) {
  if (parameters->count("residuesa") && (*parameters)["residuesa"].isEmpty()) {
    parameters->erase("residuesa");
  }
  if (parameters->count("residuesb") && (*parameters)["residuesb"].isEmpty()) {
    parameters->erase("residuesb");
  }
  if (parameters->count("reportcount") &&
      (*parameters)["reportcount"].isEmpty()) {
    parameters->erase("reportcount");
  }
  if (parameters->count("order") &&
      ((*parameters)["order"].isEmpty() || (*parameters)["order"] == "false")) {
    parameters->erase("order");
  }
  if (parameters->count("caonly") && ((*parameters)["caonly"].isEmpty() ||
                                      (*parameters)["caonly"] == "false")) {
    parameters->erase("caonly");
  }

  global_Xpos -= 30;
  global_Ypos -= 30;
  e->accept();
}

void US_Hydrodyn_Pdb_Tool_Sort::update_residuesa(const QString &) {
  (*parameters)["residuesa"] = le_residuesa->text();
}

void US_Hydrodyn_Pdb_Tool_Sort::update_residuesb(const QString &) {
  (*parameters)["residuesb"] = le_residuesb->text();
}

void US_Hydrodyn_Pdb_Tool_Sort::update_reportcount(const QString &) {
  (*parameters)["reportcount"] = le_reportcount->text();
}

void US_Hydrodyn_Pdb_Tool_Sort::set_order() {
  (*parameters)["order"] = cb_order->isChecked() ? "true" : "false";
}

void US_Hydrodyn_Pdb_Tool_Sort::set_caonly() {
  (*parameters)["caonly"] = cb_caonly->isChecked() ? "true" : "false";
}
