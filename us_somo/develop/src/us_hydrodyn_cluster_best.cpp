#include "../include/us3_defines.h"
// ---------------------------------------------------------------------------------------------
// --------------- WARNING: this code is generated by an automatic code
// generator --------------
// ---------------------------------------------------------------------------------------------
// -------------- WARNING: any modifications made to this code will be
// overwritten -------------
// ---------------------------------------------------------------------------------------------

#include "../include/us_hydrodyn_cluster_best.h"
// Added by qt3to4:
#include <QCloseEvent>
#include <QFrame>
#include <QHBoxLayout>
#include <QLabel>
#include <QTextStream>
#include <QVBoxLayout>

US_Hydrodyn_Cluster_Best::US_Hydrodyn_Cluster_Best(
    void *us_hydrodyn, map<QString, QString> *parameters, QWidget *p,
    const char *)
    : QDialog(p) {
  this->us_hydrodyn = us_hydrodyn;
  this->parameters = parameters;

  USglobal = new US_Config();
  setPalette(PALET_FRAME);
  setWindowTitle(us_tr("US-SOMO: BEST cluster interface"));

  setupGUI();

  global_Xpos += 30;
  global_Ypos += 30;

  setGeometry(global_Xpos, global_Ypos, 0, 0);
}

US_Hydrodyn_Cluster_Best::~US_Hydrodyn_Cluster_Best() {}

void US_Hydrodyn_Cluster_Best::setupGUI() {
  int minHeight1 = 30;

  lbl_title = new QLabel(us_tr("US-SOMO: BEST cluster interface"), this);
  lbl_title->setFrameStyle(QFrame::WinPanel | QFrame::Raised);
  lbl_title->setAlignment(Qt::AlignCenter | Qt::AlignVCenter);
  lbl_title->setMinimumHeight(minHeight1);
  lbl_title->setPalette(PALET_FRAME);
  AUTFBACK(lbl_title);
  lbl_title->setFont(QFont(USglobal->config_list.fontFamily,
                           USglobal->config_list.fontSize + 1, QFont::Bold));

  lbl_credits_1 = new QLabel(
      "Cite: Aragon, S.R. \"A precise boundary element method for "
      "macromolecular transport properties\", J. Comp. Chem, (2004) 25, "
      "1191-1205",
      this);
  lbl_credits_1->setAlignment(Qt::AlignCenter | Qt::AlignVCenter);
  lbl_credits_1->setMinimumHeight(minHeight1);
  lbl_credits_1->setPalette(PALET_LABEL);
  AUTFBACK(lbl_credits_1);
  lbl_credits_1->setFont(QFont(USglobal->config_list.fontFamily,
                               USglobal->config_list.fontSize + 1,
                               QFont::Bold));

  lbl_credits_2 = new QLabel(
      "Cite: Connolly, M.L. \"The molecular surface package\", J. Mol. Graph. "
      "(1993) 11: 139-141",
      this);
  lbl_credits_2->setAlignment(Qt::AlignCenter | Qt::AlignVCenter);
  lbl_credits_2->setMinimumHeight(minHeight1);
  lbl_credits_2->setPalette(PALET_LABEL);
  AUTFBACK(lbl_credits_2);
  lbl_credits_2->setFont(QFont(USglobal->config_list.fontFamily,
                               USglobal->config_list.fontSize + 1,
                               QFont::Bold));

  lbl_bestmsrprober =
      new QLabel(us_tr("MSROLL: probe radius (default:blank=1.5)"), this);
  lbl_bestmsrprober->setAlignment(Qt::AlignLeft | Qt::AlignVCenter);
  lbl_bestmsrprober->setMinimumHeight(minHeight1);
  lbl_bestmsrprober->setPalette(PALET_LABEL);
  AUTFBACK(lbl_bestmsrprober);
  lbl_bestmsrprober->setFont(QFont(USglobal->config_list.fontFamily,
                                   USglobal->config_list.fontSize - 1,
                                   QFont::Bold));
  lbl_bestmsrprober->setMinimumWidth(
      QFontMetrics(lbl_bestmsrprober->font()).maxWidth() * 41);

  le_bestmsrprober = new QLineEdit(this);
  le_bestmsrprober->setObjectName("bestmsrprober Line Edit");
  if (!parameters->count("bestmsrprober")) {
    (*parameters)["bestmsrprober"] = "1.5";
  }
  le_bestmsrprober->setText(
      parameters->count("bestmsrprober") ? (*parameters)["bestmsrprober"] : "");
  le_bestmsrprober->setAlignment(Qt::AlignCenter | Qt::AlignVCenter);
  le_bestmsrprober->setPalette(PALET_NORMAL);
  AUTFBACK(le_bestmsrprober);
  le_bestmsrprober->setFont(
      QFont(USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
  le_bestmsrprober->setMinimumHeight(minHeight1);
  le_bestmsrprober->setMinimumWidth(150);
  connect(le_bestmsrprober, SIGNAL(textChanged(const QString &)),
          SLOT(update_bestmsrprober(const QString &)));

  lbl_bestmsrfinenessangle = new QLabel(
      us_tr("MSROLL: starting fineness angle (recommended value >= 0.6)"),
      this);
  lbl_bestmsrfinenessangle->setAlignment(Qt::AlignLeft | Qt::AlignVCenter);
  lbl_bestmsrfinenessangle->setMinimumHeight(minHeight1);
  lbl_bestmsrfinenessangle->setPalette(PALET_LABEL);
  AUTFBACK(lbl_bestmsrfinenessangle);
  lbl_bestmsrfinenessangle->setFont(QFont(USglobal->config_list.fontFamily,
                                          USglobal->config_list.fontSize - 1,
                                          QFont::Bold));
  lbl_bestmsrfinenessangle->setMinimumWidth(
      QFontMetrics(lbl_bestmsrfinenessangle->font()).maxWidth() * 41);

  le_bestmsrfinenessangle = new QLineEdit(this);
  le_bestmsrfinenessangle->setObjectName("bestmsrfinenessangle Line Edit");
  if (!parameters->count("bestmsrfinenessangle")) {
    (*parameters)["bestmsrfinenessangle"] = ".6";
  }
  le_bestmsrfinenessangle->setText(parameters->count("bestmsrfinenessangle")
                                       ? (*parameters)["bestmsrfinenessangle"]
                                       : "");
  le_bestmsrfinenessangle->setAlignment(Qt::AlignCenter | Qt::AlignVCenter);
  le_bestmsrfinenessangle->setPalette(PALET_NORMAL);
  AUTFBACK(le_bestmsrfinenessangle);
  le_bestmsrfinenessangle->setFont(
      QFont(USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
  le_bestmsrfinenessangle->setMinimumHeight(minHeight1);
  le_bestmsrfinenessangle->setMinimumWidth(150);
  connect(le_bestmsrfinenessangle, SIGNAL(textChanged(const QString &)),
          SLOT(update_bestmsrfinenessangle(const QString &)));

  lbl_bestmsrmaxtriangles = new QLabel(
      us_tr("MSROLL: maximum output triangles (recommended max value 60000)"),
      this);
  lbl_bestmsrmaxtriangles->setAlignment(Qt::AlignLeft | Qt::AlignVCenter);
  lbl_bestmsrmaxtriangles->setMinimumHeight(minHeight1);
  lbl_bestmsrmaxtriangles->setPalette(PALET_LABEL);
  AUTFBACK(lbl_bestmsrmaxtriangles);
  lbl_bestmsrmaxtriangles->setFont(QFont(USglobal->config_list.fontFamily,
                                         USglobal->config_list.fontSize - 1,
                                         QFont::Bold));
  lbl_bestmsrmaxtriangles->setMinimumWidth(
      QFontMetrics(lbl_bestmsrmaxtriangles->font()).maxWidth() * 41);

  le_bestmsrmaxtriangles = new QLineEdit(this);
  le_bestmsrmaxtriangles->setObjectName("bestmsrmaxtriangles Line Edit");
  if (!parameters->count("bestmsrmaxtriangles")) {
    (*parameters)["bestmsrmaxtriangles"] = "60000";
  }
  le_bestmsrmaxtriangles->setText(parameters->count("bestmsrmaxtriangles")
                                      ? (*parameters)["bestmsrmaxtriangles"]
                                      : "");
  le_bestmsrmaxtriangles->setAlignment(Qt::AlignCenter | Qt::AlignVCenter);
  le_bestmsrmaxtriangles->setPalette(PALET_NORMAL);
  AUTFBACK(le_bestmsrmaxtriangles);
  le_bestmsrmaxtriangles->setFont(
      QFont(USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
  le_bestmsrmaxtriangles->setMinimumHeight(minHeight1);
  le_bestmsrmaxtriangles->setMinimumWidth(150);
  connect(le_bestmsrmaxtriangles, SIGNAL(textChanged(const QString &)),
          SLOT(update_bestmsrmaxtriangles(const QString &)));

  cb_bestrcoalautominmax = new QCheckBox(
      us_tr("COALESCE: automatically determine the minimum and maximum number "
            "of triangles based upon MW\n(checking overrides next 2 settings)"),
      this);
  cb_bestrcoalautominmax->setMinimumHeight(minHeight1 * 2);
  cb_bestrcoalautominmax->setPalette(PALET_NORMAL);
  AUTFBACK(cb_bestrcoalautominmax);
  cb_bestrcoalautominmax->setFont(QFont(USglobal->config_list.fontFamily,
                                        USglobal->config_list.fontSize - 1,
                                        QFont::Bold));
  cb_bestrcoalautominmax->setMinimumWidth(
      QFontMetrics(cb_bestrcoalautominmax->font()).maxWidth() * 41);

  if (!parameters->count("bestrcoalautominmax")) {
    (*parameters)["bestrcoalautominmax"] = "true";
  }
  cb_bestrcoalautominmax->setChecked(
      parameters->count("bestrcoalautominmax") &&
              (*parameters)["bestrcoalautominmax"] == "true"
          ? true
          : false);
  connect(cb_bestrcoalautominmax, SIGNAL(clicked()),
          SLOT(set_bestrcoalautominmax()));

  lbl_bestrcoalnmin = new QLabel(
      us_tr(
          "COALESCE: minimum number of triangles ( heurstic 18 * Sqrt(MW[Da]) "
          ")\n(Not active if 'automatically determine ...' checked above)"),
      this);
  lbl_bestrcoalnmin->setAlignment(Qt::AlignLeft | Qt::AlignVCenter);
  lbl_bestrcoalnmin->setMinimumHeight(minHeight1 * 2);
  lbl_bestrcoalnmin->setPalette(PALET_LABEL);
  AUTFBACK(lbl_bestrcoalnmin);
  lbl_bestrcoalnmin->setFont(QFont(USglobal->config_list.fontFamily,
                                   USglobal->config_list.fontSize - 1,
                                   QFont::Bold));
  lbl_bestrcoalnmin->setMinimumWidth(
      QFontMetrics(lbl_bestrcoalnmin->font()).maxWidth() * 41);

  le_bestrcoalnmin = new QLineEdit(this);
  le_bestrcoalnmin->setObjectName("bestrcoalnmin Line Edit");
  le_bestrcoalnmin->setText(
      parameters->count("bestrcoalnmin") ? (*parameters)["bestrcoalnmin"] : "");
  le_bestrcoalnmin->setAlignment(Qt::AlignCenter | Qt::AlignVCenter);
  le_bestrcoalnmin->setPalette(PALET_NORMAL);
  AUTFBACK(le_bestrcoalnmin);
  le_bestrcoalnmin->setFont(
      QFont(USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
  le_bestrcoalnmin->setMinimumHeight(minHeight1 * 2);
  le_bestrcoalnmin->setMinimumWidth(150);
  connect(le_bestrcoalnmin, SIGNAL(textChanged(const QString &)),
          SLOT(update_bestrcoalnmin(const QString &)));

  lbl_bestrcoalnmax = new QLabel(
      us_tr(
          "COALESCE: maximum number of triangles ( heurstic 30 * Sqrt(MW[Da]) "
          ")\n(Not active if 'automatically determine ...' checked above)"),
      this);
  lbl_bestrcoalnmax->setAlignment(Qt::AlignLeft | Qt::AlignVCenter);
  lbl_bestrcoalnmax->setMinimumHeight(minHeight1 * 2);
  lbl_bestrcoalnmax->setPalette(PALET_LABEL);
  AUTFBACK(lbl_bestrcoalnmax);
  lbl_bestrcoalnmax->setFont(QFont(USglobal->config_list.fontFamily,
                                   USglobal->config_list.fontSize - 1,
                                   QFont::Bold));
  lbl_bestrcoalnmax->setMinimumWidth(
      QFontMetrics(lbl_bestrcoalnmax->font()).maxWidth() * 41);

  le_bestrcoalnmax = new QLineEdit(this);
  le_bestrcoalnmax->setObjectName("bestrcoalnmax Line Edit");
  le_bestrcoalnmax->setText(
      parameters->count("bestrcoalnmax") ? (*parameters)["bestrcoalnmax"] : "");
  le_bestrcoalnmax->setAlignment(Qt::AlignCenter | Qt::AlignVCenter);
  le_bestrcoalnmax->setPalette(PALET_NORMAL);
  AUTFBACK(le_bestrcoalnmax);
  le_bestrcoalnmax->setFont(
      QFont(USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
  le_bestrcoalnmax->setMinimumHeight(minHeight1 * 2);
  le_bestrcoalnmax->setMinimumWidth(150);
  connect(le_bestrcoalnmax, SIGNAL(textChanged(const QString &)),
          SLOT(update_bestrcoalnmax(const QString &)));

  lbl_bestrcoaln = new QLabel(
      us_tr("COALESCE: number of files produced (Typically 6)"), this);
  lbl_bestrcoaln->setAlignment(Qt::AlignLeft | Qt::AlignVCenter);
  lbl_bestrcoaln->setMinimumHeight(minHeight1);
  lbl_bestrcoaln->setPalette(PALET_LABEL);
  AUTFBACK(lbl_bestrcoaln);
  lbl_bestrcoaln->setFont(QFont(USglobal->config_list.fontFamily,
                                USglobal->config_list.fontSize - 1,
                                QFont::Bold));
  lbl_bestrcoaln->setMinimumWidth(
      QFontMetrics(lbl_bestrcoaln->font()).maxWidth() * 41);

  le_bestrcoaln = new QLineEdit(this);
  le_bestrcoaln->setObjectName("bestrcoaln Line Edit");
  if (!parameters->count("bestrcoaln")) {
    (*parameters)["bestrcoaln"] = "6";
  }
  le_bestrcoaln->setText(
      parameters->count("bestrcoaln") ? (*parameters)["bestrcoaln"] : "");
  le_bestrcoaln->setAlignment(Qt::AlignCenter | Qt::AlignVCenter);
  le_bestrcoaln->setPalette(PALET_NORMAL);
  AUTFBACK(le_bestrcoaln);
  le_bestrcoaln->setFont(
      QFont(USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
  le_bestrcoaln->setMinimumHeight(minHeight1);
  le_bestrcoaln->setMinimumWidth(150);
  connect(le_bestrcoaln, SIGNAL(textChanged(const QString &)),
          SLOT(update_bestrcoaln(const QString &)));

  lbl_bestbestmw = new QLabel(us_tr("BEST: override computed molecular weight "
                                    "(default:blank=compute from structure)"),
                              this);
  lbl_bestbestmw->setAlignment(Qt::AlignLeft | Qt::AlignVCenter);
  lbl_bestbestmw->setMinimumHeight(minHeight1);
  lbl_bestbestmw->setPalette(PALET_LABEL);
  AUTFBACK(lbl_bestbestmw);
  lbl_bestbestmw->setFont(QFont(USglobal->config_list.fontFamily,
                                USglobal->config_list.fontSize - 1,
                                QFont::Bold));
  lbl_bestbestmw->setMinimumWidth(
      QFontMetrics(lbl_bestbestmw->font()).maxWidth() * 41);

  le_bestbestmw = new QLineEdit(this);
  le_bestbestmw->setObjectName("bestbestmw Line Edit");
  le_bestbestmw->setText(
      parameters->count("bestbestmw") ? (*parameters)["bestbestmw"] : "");
  le_bestbestmw->setAlignment(Qt::AlignCenter | Qt::AlignVCenter);
  le_bestbestmw->setPalette(PALET_NORMAL);
  AUTFBACK(le_bestbestmw);
  le_bestbestmw->setFont(
      QFont(USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
  le_bestbestmw->setMinimumHeight(minHeight1);
  le_bestbestmw->setMinimumWidth(150);
  connect(le_bestbestmw, SIGNAL(textChanged(const QString &)),
          SLOT(update_bestbestmw(const QString &)));

  lbl_bestexpand = new QLabel(us_tr("BEST: expand radii by this multiplier "
                                    "(default:blank=1, no expansion)"),
                              this);
  lbl_bestexpand->setAlignment(Qt::AlignLeft | Qt::AlignVCenter);
  lbl_bestexpand->setMinimumHeight(minHeight1);
  lbl_bestexpand->setPalette(PALET_LABEL);
  AUTFBACK(lbl_bestexpand);
  lbl_bestexpand->setFont(QFont(USglobal->config_list.fontFamily,
                                USglobal->config_list.fontSize - 1,
                                QFont::Bold));
  lbl_bestexpand->setMinimumWidth(
      QFontMetrics(lbl_bestexpand->font()).maxWidth() * 41);

  le_bestexpand = new QLineEdit(this);
  le_bestexpand->setObjectName("bestexpand Line Edit");
  le_bestexpand->setText(
      parameters->count("bestexpand") ? (*parameters)["bestexpand"] : "");
  le_bestexpand->setAlignment(Qt::AlignCenter | Qt::AlignVCenter);
  le_bestexpand->setPalette(PALET_NORMAL);
  AUTFBACK(le_bestexpand);
  le_bestexpand->setFont(
      QFont(USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
  le_bestexpand->setMinimumHeight(minHeight1);
  le_bestexpand->setMinimumWidth(150);
  connect(le_bestexpand, SIGNAL(textChanged(const QString &)),
          SLOT(update_bestexpand(const QString &)));

  cb_bestbestvc =
      new QCheckBox(us_tr("BEST: Compute the Viscosity Factor in the Center of "
                          "Viscosity {longer calculation} (default:checked)"),
                    this);
  cb_bestbestvc->setMinimumHeight(minHeight1);
  cb_bestbestvc->setPalette(PALET_NORMAL);
  AUTFBACK(cb_bestbestvc);
  cb_bestbestvc->setFont(QFont(USglobal->config_list.fontFamily,
                               USglobal->config_list.fontSize - 1,
                               QFont::Bold));
  cb_bestbestvc->setMinimumWidth(
      QFontMetrics(cb_bestbestvc->font()).maxWidth() * 41);

  if (!parameters->count("bestbestvc")) {
    (*parameters)["bestbestvc"] = "true";
  }
  cb_bestbestvc->setChecked(parameters->count("bestbestvc") &&
                                    (*parameters)["bestbestvc"] == "true"
                                ? true
                                : false);
  connect(cb_bestbestvc, SIGNAL(clicked()), SLOT(set_bestbestvc()));

  lbl_opt_label = new mQLabel(us_tr("Optional controls"), this);
  lbl_opt_label->setFrameStyle(QFrame::WinPanel | QFrame::Raised);
  lbl_opt_label->setAlignment(Qt::AlignCenter | Qt::AlignVCenter);
  lbl_opt_label->setMinimumHeight(minHeight1);
  lbl_opt_label->setPalette(PALET_FRAME);
  AUTFBACK(lbl_opt_label);
  lbl_opt_label->setFont(QFont(USglobal->config_list.fontFamily,
                               USglobal->config_list.fontSize, QFont::Bold));
  connect(lbl_opt_label, SIGNAL(pressed()), SLOT(hide_opt_label()));

  lbl_bestmsrcoalescer =
      new QLabel(us_tr("MSROLL: coalesce radius (default:blank)"), this);
  lbl_bestmsrcoalescer->setAlignment(Qt::AlignLeft | Qt::AlignVCenter);
  lbl_bestmsrcoalescer->setMinimumHeight(minHeight1);
  lbl_bestmsrcoalescer->setPalette(PALET_LABEL);
  AUTFBACK(lbl_bestmsrcoalescer);
  lbl_bestmsrcoalescer->setFont(QFont(USglobal->config_list.fontFamily,
                                      USglobal->config_list.fontSize - 1,
                                      QFont::Bold));
  lbl_bestmsrcoalescer->setMinimumWidth(
      QFontMetrics(lbl_bestmsrcoalescer->font()).maxWidth() * 41);

  le_bestmsrcoalescer = new QLineEdit(this);
  le_bestmsrcoalescer->setObjectName("bestmsrcoalescer Line Edit");
  widgets_opt_label.push_back(lbl_bestmsrcoalescer);
  widgets_opt_label.push_back(le_bestmsrcoalescer);
  le_bestmsrcoalescer->setText(parameters->count("bestmsrcoalescer")
                                   ? (*parameters)["bestmsrcoalescer"]
                                   : "");
  le_bestmsrcoalescer->setAlignment(Qt::AlignCenter | Qt::AlignVCenter);
  le_bestmsrcoalescer->setPalette(PALET_NORMAL);
  AUTFBACK(le_bestmsrcoalescer);
  le_bestmsrcoalescer->setFont(
      QFont(USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
  le_bestmsrcoalescer->setMinimumHeight(minHeight1);
  le_bestmsrcoalescer->setMinimumWidth(150);
  connect(le_bestmsrcoalescer, SIGNAL(textChanged(const QString &)),
          SLOT(update_bestmsrcoalescer(const QString &)));

  cb_bestmsrusesomoradii = new QCheckBox(
      us_tr("MSROLL: Use US-SOMO radii (checking overrides next 2 fields)"),
      this);
  cb_bestmsrusesomoradii->setMinimumHeight(minHeight1);
  cb_bestmsrusesomoradii->setPalette(PALET_NORMAL);
  AUTFBACK(cb_bestmsrusesomoradii);
  cb_bestmsrusesomoradii->setFont(QFont(USglobal->config_list.fontFamily,
                                        USglobal->config_list.fontSize - 1,
                                        QFont::Bold));
  cb_bestmsrusesomoradii->setMinimumWidth(
      QFontMetrics(cb_bestmsrusesomoradii->font()).maxWidth() * 41);

  if (((US_Hydrodyn *)us_hydrodyn)->advanced_config.expert_mode) {
    widgets_opt_label.push_back(cb_bestmsrusesomoradii);
  }
  cb_bestmsrusesomoradii->setChecked(
      parameters->count("bestmsrusesomoradii") &&
              (*parameters)["bestmsrusesomoradii"] == "true"
          ? true
          : false);
  connect(cb_bestmsrusesomoradii, SIGNAL(clicked()),
          SLOT(set_bestmsrusesomoradii()));

  lbl_bestmsrradiifile = new QLabel(us_tr("MSROLL: manual radii file"), this);
  lbl_bestmsrradiifile->setAlignment(Qt::AlignLeft | Qt::AlignVCenter);
  lbl_bestmsrradiifile->setMinimumHeight(minHeight1);
  lbl_bestmsrradiifile->setPalette(PALET_LABEL);
  AUTFBACK(lbl_bestmsrradiifile);
  lbl_bestmsrradiifile->setFont(QFont(USglobal->config_list.fontFamily,
                                      USglobal->config_list.fontSize - 1,
                                      QFont::Bold));
  lbl_bestmsrradiifile->setMinimumWidth(
      QFontMetrics(lbl_bestmsrradiifile->font()).maxWidth() * 41);

  le_bestmsrradiifile = new QLineEdit(this);
  le_bestmsrradiifile->setObjectName("bestmsrradiifile Line Edit");
  widgets_opt_label.push_back(lbl_bestmsrradiifile);
  widgets_opt_label.push_back(le_bestmsrradiifile);
  if (!parameters->count("bestmsrradiifile")) {
    (*parameters)["bestmsrradiifile"] =
        QString(USglobal->config_list.system_dir + QDir::separator() + "etc" +
                QDir::separator() + "best.radii");
  }
  le_bestmsrradiifile->setText(parameters->count("bestmsrradiifile")
                                   ? (*parameters)["bestmsrradiifile"]
                                   : "");
  le_bestmsrradiifile->setAlignment(Qt::AlignCenter | Qt::AlignVCenter);
  le_bestmsrradiifile->setPalette(PALET_NORMAL);
  AUTFBACK(le_bestmsrradiifile);
  le_bestmsrradiifile->setFont(
      QFont(USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
  le_bestmsrradiifile->setMinimumHeight(minHeight1);
  le_bestmsrradiifile->setMinimumWidth(150);
  connect(le_bestmsrradiifile, SIGNAL(textChanged(const QString &)),
          SLOT(update_bestmsrradiifile(const QString &)));

  lbl_bestmsrpatternfile =
      new QLabel(us_tr("MSROLL: manual name pattern file (must also provide "
                       "radii file above)"),
                 this);
  lbl_bestmsrpatternfile->setAlignment(Qt::AlignLeft | Qt::AlignVCenter);
  lbl_bestmsrpatternfile->setMinimumHeight(minHeight1);
  lbl_bestmsrpatternfile->setPalette(PALET_LABEL);
  AUTFBACK(lbl_bestmsrpatternfile);
  lbl_bestmsrpatternfile->setFont(QFont(USglobal->config_list.fontFamily,
                                        USglobal->config_list.fontSize - 1,
                                        QFont::Bold));
  lbl_bestmsrpatternfile->setMinimumWidth(
      QFontMetrics(lbl_bestmsrpatternfile->font()).maxWidth() * 41);

  le_bestmsrpatternfile = new QLineEdit(this);
  le_bestmsrpatternfile->setObjectName("bestmsrpatternfile Line Edit");
  widgets_opt_label.push_back(lbl_bestmsrpatternfile);
  widgets_opt_label.push_back(le_bestmsrpatternfile);
  le_bestmsrpatternfile->setText(parameters->count("bestmsrpatternfile")
                                     ? (*parameters)["bestmsrpatternfile"]
                                     : "");
  le_bestmsrpatternfile->setAlignment(Qt::AlignCenter | Qt::AlignVCenter);
  le_bestmsrpatternfile->setPalette(PALET_NORMAL);
  AUTFBACK(le_bestmsrpatternfile);
  le_bestmsrpatternfile->setFont(
      QFont(USglobal->config_list.fontFamily, USglobal->config_list.fontSize));
  le_bestmsrpatternfile->setMinimumHeight(minHeight1);
  le_bestmsrpatternfile->setMinimumWidth(150);
  connect(le_bestmsrpatternfile, SIGNAL(textChanged(const QString &)),
          SLOT(update_bestmsrpatternfile(const QString &)));

  pb_save = new QPushButton(us_tr("Save"), this);
  pb_save->setFont(QFont(USglobal->config_list.fontFamily,
                         USglobal->config_list.fontSize + 1));
  pb_save->setMinimumHeight(minHeight1);
  pb_save->setPalette(PALET_PUSHB);
  connect(pb_save, SIGNAL(clicked()), SLOT(save()));

  pb_load = new QPushButton(us_tr("Load"), this);
  pb_load->setFont(QFont(USglobal->config_list.fontFamily,
                         USglobal->config_list.fontSize + 1));
  pb_load->setMinimumHeight(minHeight1);
  pb_load->setPalette(PALET_PUSHB);
  connect(pb_load, SIGNAL(clicked()), SLOT(load()));

  pb_help = new QPushButton(us_tr("Help"), this);
  pb_help->setFont(QFont(USglobal->config_list.fontFamily,
                         USglobal->config_list.fontSize + 1));
  pb_help->setMinimumHeight(minHeight1);
  pb_help->setPalette(PALET_PUSHB);
  connect(pb_help, SIGNAL(clicked()), SLOT(help()));

  pb_close = new QPushButton(us_tr("Close"), this);
  pb_close->setFont(QFont(USglobal->config_list.fontFamily,
                          USglobal->config_list.fontSize + 1));
  pb_close->setMinimumHeight(minHeight1);
  pb_close->setPalette(PALET_PUSHB);
  connect(pb_close, SIGNAL(clicked()), SLOT(cancel()));

  QVBoxLayout *background = new QVBoxLayout(this);
  background->setContentsMargins(0, 0, 0, 0);
  background->setSpacing(0);
  background->addSpacing(4);

  background->addWidget(lbl_title);
  background->addWidget(lbl_credits_1);
  background->addWidget(lbl_credits_2);
  background->addSpacing(4);
  QHBoxLayout *hbl = new QHBoxLayout();
  hbl->setContentsMargins(0, 0, 0, 0);
  hbl->setSpacing(0);
  hbl->addSpacing(4);
  hbl->addWidget(lbl_bestmsrprober);
  hbl->addWidget(le_bestmsrprober);
  hbl->addSpacing(4);
  background->addLayout(hbl);
  hbl = new QHBoxLayout();
  hbl->addSpacing(4);
  hbl->addWidget(lbl_bestmsrfinenessangle);
  hbl->addWidget(le_bestmsrfinenessangle);
  hbl->addSpacing(4);
  background->addLayout(hbl);
  hbl = new QHBoxLayout();
  hbl->addSpacing(4);
  hbl->addWidget(lbl_bestmsrmaxtriangles);
  hbl->addWidget(le_bestmsrmaxtriangles);
  hbl->addSpacing(4);
  background->addLayout(hbl);
  hbl = new QHBoxLayout();
  hbl->addSpacing(4);
  hbl->addWidget(cb_bestrcoalautominmax);
  hbl->addSpacing(4);
  background->addLayout(hbl);
  hbl = new QHBoxLayout();
  hbl->addSpacing(4);
  hbl->addWidget(lbl_bestrcoalnmin);
  hbl->addWidget(le_bestrcoalnmin);
  hbl->addSpacing(4);
  background->addLayout(hbl);
  hbl = new QHBoxLayout();
  hbl->addSpacing(4);
  hbl->addWidget(lbl_bestrcoalnmax);
  hbl->addWidget(le_bestrcoalnmax);
  hbl->addSpacing(4);
  background->addLayout(hbl);
  hbl = new QHBoxLayout();
  hbl->addSpacing(4);
  hbl->addWidget(lbl_bestrcoaln);
  hbl->addWidget(le_bestrcoaln);
  hbl->addSpacing(4);
  background->addLayout(hbl);
  hbl = new QHBoxLayout();
  hbl->addSpacing(4);
  hbl->addWidget(lbl_bestbestmw);
  hbl->addWidget(le_bestbestmw);
  hbl->addSpacing(4);
  background->addLayout(hbl);
  hbl = new QHBoxLayout();
  hbl->addSpacing(4);
  hbl->addWidget(lbl_bestexpand);
  hbl->addWidget(le_bestexpand);
  hbl->addSpacing(4);
  background->addLayout(hbl);
  hbl = new QHBoxLayout();
  hbl->addSpacing(4);
  hbl->addWidget(cb_bestbestvc);
  hbl->addSpacing(4);
  background->addLayout(hbl);
  hbl = new QHBoxLayout();
  hbl->addSpacing(4);
  hbl->addWidget(lbl_opt_label);
  hide_widgets(widgets_opt_label, true, false);
  hbl->addSpacing(4);
  background->addLayout(hbl);
  hbl = new QHBoxLayout();
  hbl->addSpacing(4);
  hbl->addWidget(lbl_bestmsrcoalescer);
  hbl->addWidget(le_bestmsrcoalescer);
  hbl->addSpacing(4);
  background->addLayout(hbl);
  hbl = new QHBoxLayout();
  hbl->addSpacing(4);
  hbl->addWidget(cb_bestmsrusesomoradii);
  hbl->addSpacing(4);
  background->addLayout(hbl);
  hbl = new QHBoxLayout();
  hbl->addSpacing(4);
  hbl->addWidget(lbl_bestmsrradiifile);
  hbl->addWidget(le_bestmsrradiifile);
  hbl->addSpacing(4);
  background->addLayout(hbl);
  hbl = new QHBoxLayout();
  hbl->addSpacing(4);
  hbl->addWidget(lbl_bestmsrpatternfile);
  hbl->addWidget(le_bestmsrpatternfile);
  hbl->addSpacing(4);
  background->addLayout(hbl);
  hbl = new QHBoxLayout();
  hbl->addSpacing(4);
  hbl->addWidget(pb_save);
  hbl->addSpacing(4);
  hbl->addWidget(pb_load);
  hbl->addSpacing(4);
  background->addLayout(hbl);
  hbl = new QHBoxLayout();
  hbl->addSpacing(4);
  if (!((US_Hydrodyn *)us_hydrodyn)->advanced_config.expert_mode) {
    cb_bestmsrusesomoradii->hide();
  }

  QHBoxLayout *hbl_bottom = new QHBoxLayout();
  hbl_bottom->setContentsMargins(0, 0, 0, 0);
  hbl_bottom->setSpacing(0);
  hbl_bottom->addSpacing(4);
  hbl_bottom->addWidget(pb_help);
  hbl_bottom->addSpacing(4);
  hbl_bottom->addWidget(pb_close);
  hbl_bottom->addSpacing(4);

  background->addLayout(hbl_bottom);
  background->addSpacing(4);
  qApp->processEvents();
  resize(0, 0);
}

void US_Hydrodyn_Cluster_Best::cancel() { close(); }

void US_Hydrodyn_Cluster_Best::help() {
  US_Help *online_help;
  online_help = new US_Help(this);
  online_help->show_help("manual/somo/somo_BEST_setup.html");
}

void US_Hydrodyn_Cluster_Best::closeEvent(QCloseEvent *e) {
  if (parameters->count("bestmsrprober") &&
      (*parameters)["bestmsrprober"].isEmpty()) {
    parameters->erase("bestmsrprober");
  }
  if (parameters->count("bestmsrfinenessangle") &&
      (*parameters)["bestmsrfinenessangle"].isEmpty()) {
    parameters->erase("bestmsrfinenessangle");
  }
  if (parameters->count("bestmsrmaxtriangles") &&
      (*parameters)["bestmsrmaxtriangles"].isEmpty()) {
    parameters->erase("bestmsrmaxtriangles");
  }
  if (parameters->count("bestrcoalnmin") &&
      (*parameters)["bestrcoalnmin"].isEmpty()) {
    parameters->erase("bestrcoalnmin");
  }
  if (parameters->count("bestrcoalnmax") &&
      (*parameters)["bestrcoalnmax"].isEmpty()) {
    parameters->erase("bestrcoalnmax");
  }
  if (parameters->count("bestrcoaln") &&
      (*parameters)["bestrcoaln"].isEmpty()) {
    parameters->erase("bestrcoaln");
  }
  if (parameters->count("bestbestmw") &&
      (*parameters)["bestbestmw"].isEmpty()) {
    parameters->erase("bestbestmw");
  }
  if (parameters->count("bestexpand") &&
      (*parameters)["bestexpand"].isEmpty()) {
    parameters->erase("bestexpand");
  }
  if (parameters->count("bestmsrcoalescer") &&
      (*parameters)["bestmsrcoalescer"].isEmpty()) {
    parameters->erase("bestmsrcoalescer");
  }
  if (parameters->count("bestmsrusesomoradii") &&
      ((*parameters)["bestmsrusesomoradii"].isEmpty() ||
       (*parameters)["bestmsrusesomoradii"] == "false")) {
    parameters->erase("bestmsrusesomoradii");
  }
  if (parameters->count("bestmsrradiifile") &&
      (*parameters)["bestmsrradiifile"].isEmpty()) {
    parameters->erase("bestmsrradiifile");
  }
  if (parameters->count("bestmsrpatternfile") &&
      (*parameters)["bestmsrpatternfile"].isEmpty()) {
    parameters->erase("bestmsrpatternfile");
  }

  global_Xpos -= 30;
  global_Ypos -= 30;
  e->accept();
}

void US_Hydrodyn_Cluster_Best::update_bestmsrprober(const QString &) {
  (*parameters)["bestmsrprober"] = le_bestmsrprober->text();
}

void US_Hydrodyn_Cluster_Best::update_bestmsrfinenessangle(const QString &) {
  (*parameters)["bestmsrfinenessangle"] = le_bestmsrfinenessangle->text();
}

void US_Hydrodyn_Cluster_Best::update_bestmsrmaxtriangles(const QString &) {
  (*parameters)["bestmsrmaxtriangles"] = le_bestmsrmaxtriangles->text();
}

void US_Hydrodyn_Cluster_Best::set_bestrcoalautominmax() {
  (*parameters)["bestrcoalautominmax"] =
      cb_bestrcoalautominmax->isChecked() ? "true" : "false";
}

void US_Hydrodyn_Cluster_Best::update_bestrcoalnmin(const QString &) {
  (*parameters)["bestrcoalnmin"] = le_bestrcoalnmin->text();
}

void US_Hydrodyn_Cluster_Best::update_bestrcoalnmax(const QString &) {
  (*parameters)["bestrcoalnmax"] = le_bestrcoalnmax->text();
}

void US_Hydrodyn_Cluster_Best::update_bestrcoaln(const QString &) {
  (*parameters)["bestrcoaln"] = le_bestrcoaln->text();
}

void US_Hydrodyn_Cluster_Best::update_bestbestmw(const QString &) {
  (*parameters)["bestbestmw"] = le_bestbestmw->text();
}

void US_Hydrodyn_Cluster_Best::update_bestexpand(const QString &) {
  (*parameters)["bestexpand"] = le_bestexpand->text();
}

void US_Hydrodyn_Cluster_Best::set_bestbestvc() {
  (*parameters)["bestbestvc"] = cb_bestbestvc->isChecked() ? "true" : "false";
}
void US_Hydrodyn_Cluster_Best::hide_opt_label() {
  hide_widgets(widgets_opt_label,
               widgets_opt_label.size() && widgets_opt_label[0]->isVisible());
}

void US_Hydrodyn_Cluster_Best::hide_widgets(vector<QWidget *> w, bool do_hide,
                                            bool do_resize) {
  for (unsigned int i = 0; i < (unsigned int)w.size(); i++) {
    do_hide ? w[i]->hide() : w[i]->show();
  }
  if (do_resize) {
    qApp->processEvents();
    resize(0, 0);
  }
}

void US_Hydrodyn_Cluster_Best::update_bestmsrcoalescer(const QString &) {
  (*parameters)["bestmsrcoalescer"] = le_bestmsrcoalescer->text();
}

void US_Hydrodyn_Cluster_Best::set_bestmsrusesomoradii() {
  (*parameters)["bestmsrusesomoradii"] =
      cb_bestmsrusesomoradii->isChecked() ? "true" : "false";
}

void US_Hydrodyn_Cluster_Best::update_bestmsrradiifile(const QString &) {
  QString use_dir;
  ((US_Hydrodyn *)us_hydrodyn)->select_from_directory_history(use_dir, this);
  QString filename = QFileDialog::getOpenFileName(
      this, us_tr("Select a file for MSROLL: manual radii file"), use_dir,
      QString());

  disconnect(le_bestmsrradiifile, SIGNAL(textChanged(const QString &)), 0, 0);
  le_bestmsrradiifile->setText(filename);
  connect(le_bestmsrradiifile, SIGNAL(textChanged(const QString &)),
          SLOT(update_bestmsrradiifile(const QString &)));
  if (!filename.isEmpty()) {
    ((US_Hydrodyn *)us_hydrodyn)->add_to_directory_history(filename);
  }
  (*parameters)["bestmsrradiifile"] = le_bestmsrradiifile->text();
}

void US_Hydrodyn_Cluster_Best::update_bestmsrpatternfile(const QString &) {
  QString use_dir;
  ((US_Hydrodyn *)us_hydrodyn)->select_from_directory_history(use_dir, this);
  QString filename = QFileDialog::getOpenFileName(
      this,
      us_tr("Select a file for MSROLL: manual name pattern file (must also "
            "provide radii file above)"),
      use_dir, QString());

  disconnect(le_bestmsrpatternfile, SIGNAL(textChanged(const QString &)), 0, 0);
  le_bestmsrpatternfile->setText(filename);
  connect(le_bestmsrpatternfile, SIGNAL(textChanged(const QString &)),
          SLOT(update_bestmsrpatternfile(const QString &)));
  if (!filename.isEmpty()) {
    ((US_Hydrodyn *)us_hydrodyn)->add_to_directory_history(filename);
  }
  (*parameters)["bestmsrpatternfile"] = le_bestmsrpatternfile->text();
}

void US_Hydrodyn_Cluster_Best::save() {
  QString use_dir = ((US_Hydrodyn *)us_hydrodyn)->somo_dir + QDir::separator() +
                    "cluster" + QDir::separator() + "parameters";
  ((US_Hydrodyn *)us_hydrodyn)
      ->select_from_directory_history(use_dir, this, true);
  QString filename = QFileDialog::getSaveFileName(
      this, us_tr("Save the parameters"), use_dir, "*.cluster_best");

  if (!filename.isEmpty()) {
    ((US_Hydrodyn *)us_hydrodyn)->add_to_directory_history(filename);
    if (!filename.contains(QRegExp("\\.cluster_best$"))) {
      filename += ".cluster_best";
    }
    QFile f(filename);
    if (!f.open(QIODevice::WriteOnly)) {
      QMessageBox::information(
          this,
          us_tr(QString("%1: Save").arg("US-SOMO: BEST cluster interface")),
          QString(us_tr("Could not open file %1 for writing")).arg(filename));
      return;
    }
    QTextStream ts(&f);
    ts << US_Json::compose(*parameters);
    f.close();
  }
}

void US_Hydrodyn_Cluster_Best::load() {
  QString use_dir = ((US_Hydrodyn *)us_hydrodyn)->somo_dir + QDir::separator() +
                    "cluster" + QDir::separator() + "parameters";
  ((US_Hydrodyn *)us_hydrodyn)
      ->select_from_directory_history(use_dir, this, true);
  QString filename = QFileDialog::getOpenFileName(
      this, us_tr("Load parameters"), use_dir, "*.cluster_best");

  if (!filename.isEmpty()) {
    ((US_Hydrodyn *)us_hydrodyn)->add_to_directory_history(filename);
    QFile f(filename);
    if (!f.open(QIODevice::ReadOnly)) {
      QMessageBox::information(
          this,
          us_tr(QString("%1: Open").arg("US-SOMO: BEST cluster interface")),
          QString(us_tr("Could not open file %1 for reading")).arg(filename));
      return;
    }
    QString qs;
    QTextStream ts(&f);
    while (!ts.atEnd()) {
      qs += ts.readLine();
    }
    f.close();
    *parameters = US_Json::split(qs);
    update_fields();
  }
}

void US_Hydrodyn_Cluster_Best::update_fields() {
  le_bestmsrprober->setText(
      parameters->count("bestmsrprober") ? (*parameters)["bestmsrprober"] : "");
  le_bestmsrfinenessangle->setText(parameters->count("bestmsrfinenessangle")
                                       ? (*parameters)["bestmsrfinenessangle"]
                                       : "");
  le_bestmsrmaxtriangles->setText(parameters->count("bestmsrmaxtriangles")
                                      ? (*parameters)["bestmsrmaxtriangles"]
                                      : "");
  cb_bestrcoalautominmax->setChecked(
      parameters->count("bestrcoalautominmax") &&
              (*parameters)["bestrcoalautominmax"] == "true"
          ? true
          : false);
  le_bestrcoalnmin->setText(
      parameters->count("bestrcoalnmin") ? (*parameters)["bestrcoalnmin"] : "");
  le_bestrcoalnmax->setText(
      parameters->count("bestrcoalnmax") ? (*parameters)["bestrcoalnmax"] : "");
  le_bestrcoaln->setText(
      parameters->count("bestrcoaln") ? (*parameters)["bestrcoaln"] : "");
  le_bestbestmw->setText(
      parameters->count("bestbestmw") ? (*parameters)["bestbestmw"] : "");
  le_bestexpand->setText(
      parameters->count("bestexpand") ? (*parameters)["bestexpand"] : "");
  cb_bestbestvc->setChecked(parameters->count("bestbestvc") &&
                                    (*parameters)["bestbestvc"] == "true"
                                ? true
                                : false);
  le_bestmsrcoalescer->setText(parameters->count("bestmsrcoalescer")
                                   ? (*parameters)["bestmsrcoalescer"]
                                   : "");
  cb_bestmsrusesomoradii->setChecked(
      parameters->count("bestmsrusesomoradii") &&
              (*parameters)["bestmsrusesomoradii"] == "true"
          ? true
          : false);
  disconnect(le_bestmsrradiifile, SIGNAL(textChanged(const QString &)), 0, 0);
  le_bestmsrradiifile->setText(parameters->count("bestmsrradiifile")
                                   ? (*parameters)["bestmsrradiifile"]
                                   : "");
  connect(le_bestmsrradiifile, SIGNAL(textChanged(const QString &)),
          SLOT(update_bestmsrradiifile(const QString &)));
  disconnect(le_bestmsrpatternfile, SIGNAL(textChanged(const QString &)), 0, 0);
  le_bestmsrpatternfile->setText(parameters->count("bestmsrpatternfile")
                                     ? (*parameters)["bestmsrpatternfile"]
                                     : "");
  connect(le_bestmsrpatternfile, SIGNAL(textChanged(const QString &)),
          SLOT(update_bestmsrpatternfile(const QString &)));
}
