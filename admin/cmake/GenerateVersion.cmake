# admin/cmake/GenerateVersion.cmake
# Generates version and build metadata

# Get version from CMake project
set(VERSION_MAJOR ${PROJECT_VERSION_MAJOR})
set(VERSION_MINOR ${PROJECT_VERSION_MINOR})
set(VERSION_PATCH ${PROJECT_VERSION_PATCH})

# Get git commit count as build number
execute_process(
        COMMAND git rev-list --count HEAD
        WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
        OUTPUT_VARIABLE BUILD_NUMBER
        OUTPUT_STRIP_TRAILING_WHITESPACE
        ERROR_QUIET
)

if(NOT BUILD_NUMBER)
    set(BUILD_NUMBER "0")
endif()

# Get git commit hash
execute_process(
        COMMAND git rev-parse --short HEAD
        WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
        OUTPUT_VARIABLE GIT_COMMIT_HASH
        OUTPUT_STRIP_TRAILING_WHITESPACE
        ERROR_QUIET
)

if(NOT GIT_COMMIT_HASH)
    set(GIT_COMMIT_HASH "unknown")
endif()

# Get git branch
execute_process(
        COMMAND git rev-parse --abbrev-ref HEAD
        WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
        OUTPUT_VARIABLE GIT_BRANCH
        OUTPUT_STRIP_TRAILING_WHITESPACE
        ERROR_QUIET
)

if(NOT GIT_BRANCH)
    set(GIT_BRANCH "unknown")
endif()

# Check if working directory is dirty
execute_process(
        COMMAND git diff-index --quiet HEAD --
        WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
        RESULT_VARIABLE GIT_DIRTY
        ERROR_QUIET
)

if(GIT_DIRTY)
    set(GIT_DIRTY_FLAG "-dirty")
else()
    set(GIT_DIRTY_FLAG "")
endif()

# Get current timestamps
string(TIMESTAMP BUILD_DATE "%Y-%m-%d" UTC)
string(TIMESTAMP BUILD_TIME "%H:%M:%S UTC" UTC)
string(TIMESTAMP BUILD_TIMESTAMP "%Y%m%d%H%M%S" UTC)

# Construct full version string
set(VERSION_STRING "${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH}")
set(VERSION_FULL "${VERSION_STRING}+${BUILD_NUMBER}")

# Determine OS title
if(WIN32)
    set(OS_TITLE "Windows")
elseif(APPLE)
    set(OS_TITLE "macOS")
elseif(UNIX)
    set(OS_TITLE "Linux")
else()
    set(OS_TITLE "Unknown")
endif()

# Create us subdirectory in build for legacy compatibility
file(MAKE_DIRECTORY ${CMAKE_BINARY_DIR}/us)

# Generate version header - this goes in the BUILD directory
file(WRITE ${CMAKE_BINARY_DIR}/us_version.h
        "#ifndef US_VERSION_H
#define US_VERSION_H

/* Auto-generated by CMake: DO NOT EDIT. */

// Version components
#define VERSION_MAJOR      ${VERSION_MAJOR}
#define VERSION_MINOR      ${VERSION_MINOR}
#define VERSION_PATCH      ${VERSION_PATCH}
#define BUILD_NUMBER       \"${BUILD_NUMBER}\"

// Full version strings
#define VERSION_STRING     \"${VERSION_STRING}\"
#define VERSION_FULL       \"${VERSION_FULL}\"

// Override US_Version from us_defines.h with actual version
#ifdef US_Version
#undef US_Version
#endif
#define US_Version         QString(\"${VERSION_STRING}\")

// Git information
#define GIT_COMMIT_HASH    \"${GIT_COMMIT_HASH}${GIT_DIRTY_FLAG}\"
#define GIT_BRANCH         \"${GIT_BRANCH}\"

// Build timestamp
#define BUILD_DATE         \"${BUILD_DATE}\"
#define BUILD_TIME         \"${BUILD_TIME}\"
#define BUILD_TIMESTAMP    \"${BUILD_TIMESTAMP}\"

// Legacy compatibility
#define BUILDNUM           BUILD_NUMBER

#endif /* US_VERSION_H */
")

# Also create us_revision.h for legacy code that includes it directly
file(WRITE ${CMAKE_BINARY_DIR}/us/us_revision.h
        "#ifndef US_REVISION_H
#define US_REVISION_H

/* Auto-generated by CMake: DO NOT EDIT. */
/* Legacy header - use us_version.h in new code */

#define BUILDNUM     \"${BUILD_NUMBER}\"
#define BUILD_DATE   \"${BUILD_DATE}\"
#define BUILD_TIME   \"${BUILD_TIME}\"

#endif /* US_REVISION_H */
")

message(STATUS "Generated version ${VERSION_FULL} (${GIT_COMMIT_HASH}${GIT_DIRTY_FLAG} on ${GIT_BRANCH})")